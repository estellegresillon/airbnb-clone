{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Select from 'react-select';\nimport { setRestaurants, searchRestaurant, sortRestaurants, toggleMap, centerMapWithLocation, toggleListingAwards } from \"../../actions\";\nimport { INIT_ARR_OPTIONS, INIT_TYPE_OPTIONS } from \"../../constants/filter-options\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { filterArrByType, filterTypeByArr } from './helper';\n\nvar SearchByName = function SearchByName(props) {\n  var restaurants = props.restaurants,\n      searchRestaurant = props.searchRestaurant,\n      centerMapWithLocation = props.centerMapWithLocation,\n      toggleListingAwards = props.toggleListingAwards,\n      sortRestaurants = props.sortRestaurants,\n      toggleMap = props.toggleMap,\n      showMap = props.showMap,\n      homeArr = props.homeArr,\n      homeType = props.homeType;\n\n  var _useState = useState(\"Tous les arr.\"),\n      arr = _useState[0],\n      setArr = _useState[1];\n\n  var _useState2 = useState(\"Tous les types\"),\n      type = _useState2[0],\n      setType = _useState2[1];\n\n  var _useState3 = useState(null),\n      searchedRestaurant = _useState3[0],\n      setSearchedRestaurant = _useState3[1];\n\n  var _useState4 = useState(INIT_TYPE_OPTIONS),\n      typeOptions = _useState4[0],\n      setTypeOptions = _useState4[1];\n\n  var _useState5 = useState(INIT_ARR_OPTIONS),\n      arrOptions = _useState5[0],\n      setArrOptions = _useState5[1];\n\n  var windowSize = useWindowSize();\n\n  var scrollToTop = function scrollToTop() {\n    document.querySelector(\".tab-number-0\").scrollIntoView();\n  };\n\n  var handleSearchChange = function handleSearchChange(event, value) {\n    setSearchedRestaurant(value);\n    setArr(\"Tous les arr.\");\n    setType(\"Tous les types\");\n    toggleListingAwards(false);\n\n    if (value) {\n      searchRestaurant([value]);\n    } else {\n      searchRestaurant(null);\n      setRestaurants();\n    }\n\n    if (windowSize.width > 728) {\n      scrollToTop();\n    }\n  };\n\n  var filterList = function filterList(list, option) {\n    setSearchedRestaurant(null);\n    searchRestaurant(null);\n    toggleListingAwards(false);\n\n    if (option === \"type\") {\n      centerMapWithLocation(null);\n      filterArrByType(list, arr, restaurants, setArrOptions, sortRestaurants);\n    } else {\n      centerMapWithLocation(arr);\n      filterTypeByArr(list, type, restaurants, setTypeOptions, sortRestaurants);\n    }\n\n    if (windowSize.width > 728 && option === \"arr\" && !homeArr || windowSize.width > 728 && option === \"type\" && !homeType) {\n      scrollToTop();\n    }\n  };\n\n  var handleOptionsChange = function handleOptionsChange(e, option) {\n    var selectedValue = e.value;\n\n    if (option === \"type\") {\n      setType(selectedValue);\n    } else {\n      setArr(selectedValue);\n    }\n\n    filterList(selectedValue, option);\n  };\n\n  var handleToggleMap = function handleToggleMap() {\n    toggleMap(showMap);\n  };\n\n  var reinitializeFilters = function reinitializeFilters() {\n    // empty autocomplete input\n    searchRestaurant(null);\n    setSearchedRestaurant(null); // resort Restaurants by rate\n\n    sortRestaurants([]); // display all Restaurants\n\n    setRestaurants(); // reinit filter options\n\n    setTypeOptions(INIT_TYPE_OPTIONS);\n    setArrOptions(INIT_ARR_OPTIONS); // set default values\n\n    setArr(\"Tous les arr.\");\n    setType(\"Tous les types\"); // reset map location\n\n    centerMapWithLocation(null); // show awards selection again\n\n    toggleListingAwards(true); // scroll to top only after the list is re-rendered\n\n    if (windowSize.width > 728) {\n      scrollToTop();\n    }\n  };\n\n  useEffect(function () {\n    if (restaurants && homeArr && homeArr !== \"Tous les arr.\") {\n      setArr(homeArr);\n      filterList(homeArr, \"arr\");\n    }\n\n    ;\n\n    if (restaurants && homeType && homeType !== \"Tous les types\") {\n      setType(homeType);\n      filterList(homeType, \"type\");\n    }\n\n    ; // eslint-disable-next-line\n  }, [restaurants]);\n  return __jsx(\"div\", {\n    className: \"filters\"\n  }, __jsx(\"div\", {\n    className: \"filters-left\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-search\"\n  }), __jsx(Autocomplete, {\n    id: \"search-by-name\",\n    options: restaurants,\n    getOptionLabel: function getOptionLabel(option) {\n      return \"\".concat(option.name, \" - \").concat(option.type);\n    },\n    style: {\n      width: \"300px\",\n      marginRight: \"10px\"\n    },\n    value: searchedRestaurant,\n    onChange: handleSearchChange,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        style: {\n          width: \"100%\",\n          marginRight: \"20px\",\n          padding: \"0px\"\n        },\n        value: searchedRestaurant,\n        placeholder: \"Rechercher par nom ou type de restaurant\",\n        variant: \"outlined\",\n        fullWidth: true\n      }));\n    }\n  }), __jsx(Select, {\n    value: arr,\n    options: arrOptions,\n    onChange: function onChange(e) {\n      return handleOptionsChange(e, \"arr\");\n    },\n    placeholder: arr,\n    isSearchable: false,\n    className: \"filters-react-select filter-arr\"\n  }), __jsx(Select, {\n    value: type,\n    options: typeOptions,\n    onChange: function onChange(e) {\n      return handleOptionsChange(e, \"type\");\n    },\n    placeholder: type,\n    isSearchable: false,\n    className: \"filters-react-select filter-type\"\n  }), __jsx(\"button\", {\n    className: \"button-filter-reinitialize\",\n    onClick: reinitializeFilters\n  }, \"R\\xE9initialiser\")), __jsx(\"div\", {\n    className: \"filters-right\"\n  }, __jsx(\"div\", {\n    className: \"button-toggle-map\",\n    onClick: handleToggleMap\n  }, showMap ? \"Cacher la carte\" : \"Afficher la carte\", __jsx(\"div\", {\n    style: {\n      justifyContent: showMap ? \"flex-end\" : \"flex-start\",\n      backgroundColor: showMap ? \"#ea4235\" : \"#ff6643\"\n    },\n    className: \"switch-toggle-map\"\n  }, __jsx(\"div\", {\n    className: \"toggle-circle\"\n  })))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    restaurants: state.restaurants,\n    showMap: state.showMap\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setRestaurants: setRestaurants,\n    searchRestaurant: searchRestaurant,\n    sortRestaurants: sortRestaurants,\n    toggleMap: toggleMap,\n    centerMapWithLocation: centerMapWithLocation,\n    toggleListingAwards: toggleListingAwards\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchByName);","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/restaurants/filters.jsx"],"names":["React","useState","useEffect","bindActionCreators","connect","TextField","Autocomplete","Select","setRestaurants","searchRestaurant","sortRestaurants","toggleMap","centerMapWithLocation","toggleListingAwards","INIT_ARR_OPTIONS","INIT_TYPE_OPTIONS","useWindowSize","filterArrByType","filterTypeByArr","SearchByName","props","restaurants","showMap","homeArr","homeType","arr","setArr","type","setType","searchedRestaurant","setSearchedRestaurant","typeOptions","setTypeOptions","arrOptions","setArrOptions","windowSize","scrollToTop","document","querySelector","scrollIntoView","handleSearchChange","event","value","width","filterList","list","option","handleOptionsChange","e","selectedValue","handleToggleMap","reinitializeFilters","name","marginRight","params","padding","justifyContent","backgroundColor","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SACEC,cADF,EAEEC,gBAFF,EAGEC,eAHF,EAIEC,SAJF,EAKEC,qBALF,EAMEC,mBANF,QAOO,eAPP;AAQA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,gCAApD;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,UAAjD;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA,MAE1BC,WAF0B,GAWxBD,KAXwB,CAE1BC,WAF0B;AAAA,MAG1BZ,gBAH0B,GAWxBW,KAXwB,CAG1BX,gBAH0B;AAAA,MAI1BG,qBAJ0B,GAWxBQ,KAXwB,CAI1BR,qBAJ0B;AAAA,MAK1BC,mBAL0B,GAWxBO,KAXwB,CAK1BP,mBAL0B;AAAA,MAM1BH,eAN0B,GAWxBU,KAXwB,CAM1BV,eAN0B;AAAA,MAO1BC,SAP0B,GAWxBS,KAXwB,CAO1BT,SAP0B;AAAA,MAQ1BW,OAR0B,GAWxBF,KAXwB,CAQ1BE,OAR0B;AAAA,MAS1BC,OAT0B,GAWxBH,KAXwB,CAS1BG,OAT0B;AAAA,MAU1BC,QAV0B,GAWxBJ,KAXwB,CAU1BI,QAV0B;;AAAA,kBAYNvB,QAAQ,CAAC,eAAD,CAZF;AAAA,MAYrBwB,GAZqB;AAAA,MAYhBC,MAZgB;;AAAA,mBAaJzB,QAAQ,CAAC,gBAAD,CAbJ;AAAA,MAarB0B,IAbqB;AAAA,MAafC,OAbe;;AAAA,mBAcwB3B,QAAQ,CAAC,IAAD,CAdhC;AAAA,MAcrB4B,kBAdqB;AAAA,MAcDC,qBAdC;;AAAA,mBAeU7B,QAAQ,CAACc,iBAAD,CAflB;AAAA,MAerBgB,WAfqB;AAAA,MAeRC,cAfQ;;AAAA,mBAgBQ/B,QAAQ,CAACa,gBAAD,CAhBhB;AAAA,MAgBrBmB,UAhBqB;AAAA,MAgBTC,aAhBS;;AAiB5B,MAAMC,UAAU,GAAGnB,aAAa,EAAhC;;AAEA,MAAMoB,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBC,IAAAA,QAAQ,CAACC,aAAT,CAAuB,eAAvB,EAAwCC,cAAxC;AACD,GAFD;;AAIA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAC3CZ,IAAAA,qBAAqB,CAACY,KAAD,CAArB;AACAhB,IAAAA,MAAM,CAAC,eAAD,CAAN;AACAE,IAAAA,OAAO,CAAC,gBAAD,CAAP;AACAf,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;;AAEA,QAAI6B,KAAJ,EAAW;AACTjC,MAAAA,gBAAgB,CAAC,CAACiC,KAAD,CAAD,CAAhB;AACD,KAFD,MAEO;AACLjC,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAD,MAAAA,cAAc;AACf;;AAED,QAAI2B,UAAU,CAACQ,KAAX,GAAmB,GAAvB,EAA4B;AAC1BP,MAAAA,WAAW;AACZ;AACF,GAhBD;;AAkBA,MAAMQ,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,MAAP,EAAkB;AACnChB,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACArB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAI,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;;AAEA,QAAIiC,MAAM,KAAK,MAAf,EAAuB;AACrBlC,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAK,MAAAA,eAAe,CAAC4B,IAAD,EAAOpB,GAAP,EAAYJ,WAAZ,EAAyBa,aAAzB,EAAwCxB,eAAxC,CAAf;AACD,KAHD,MAGO;AACLE,MAAAA,qBAAqB,CAACa,GAAD,CAArB;AACAP,MAAAA,eAAe,CAAC2B,IAAD,EAAOlB,IAAP,EAAaN,WAAb,EAA0BW,cAA1B,EAA0CtB,eAA1C,CAAf;AACD;;AAED,QAAKyB,UAAU,CAACQ,KAAX,GAAmB,GAAnB,IAA2BG,MAAM,KAAK,KAAX,IAAoB,CAACvB,OAAjD,IACDY,UAAU,CAACQ,KAAX,GAAmB,GAAnB,IAA2BG,MAAM,KAAK,MAAX,IAAqB,CAACtB,QADpD,EACgE;AAC9DY,MAAAA,WAAW;AACZ;AACF,GAjBD;;AAmBA,MAAMW,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,CAAD,EAAIF,MAAJ,EAAe;AACzC,QAAMG,aAAa,GAAGD,CAAC,CAACN,KAAxB;;AAEA,QAAII,MAAM,KAAK,MAAf,EAAuB;AACrBlB,MAAAA,OAAO,CAACqB,aAAD,CAAP;AACD,KAFD,MAEO;AACLvB,MAAAA,MAAM,CAACuB,aAAD,CAAN;AACD;;AACDL,IAAAA,UAAU,CAACK,aAAD,EAAgBH,MAAhB,CAAV;AACD,GATD;;AAWA,MAAMI,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BvC,IAAAA,SAAS,CAACW,OAAD,CAAT;AACD,GAFD;;AAIA,MAAM6B,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC;AACA1C,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAqB,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CAHgC,CAKhC;;AACApB,IAAAA,eAAe,CAAC,EAAD,CAAf,CANgC,CAOhC;;AACAF,IAAAA,cAAc,GARkB,CAUhC;;AACAwB,IAAAA,cAAc,CAACjB,iBAAD,CAAd;AACAmB,IAAAA,aAAa,CAACpB,gBAAD,CAAb,CAZgC,CAchC;;AACAY,IAAAA,MAAM,CAAC,eAAD,CAAN;AACAE,IAAAA,OAAO,CAAC,gBAAD,CAAP,CAhBgC,CAkBhC;;AACAhB,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CAnBgC,CAqBhC;;AACAC,IAAAA,mBAAmB,CAAC,IAAD,CAAnB,CAtBgC,CAwBhC;;AACA,QAAIsB,UAAU,CAACQ,KAAX,GAAmB,GAAvB,EAA4B;AAC1BP,MAAAA,WAAW;AACZ;AACF,GA5BD;;AA8BAlC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAImB,WAAW,IAAIE,OAAf,IAA0BA,OAAO,KAAK,eAA1C,EAA2D;AACzDG,MAAAA,MAAM,CAACH,OAAD,CAAN;AACAqB,MAAAA,UAAU,CAACrB,OAAD,EAAU,KAAV,CAAV;AACD;;AAAA;;AAED,QAAIF,WAAW,IAAIG,QAAf,IAA2BA,QAAQ,KAAK,gBAA5C,EAA8D;AAC5DI,MAAAA,OAAO,CAACJ,QAAD,CAAP;AACAoB,MAAAA,UAAU,CAACpB,QAAD,EAAW,MAAX,CAAV;AACD;;AAAA,KATa,CAUhB;AACC,GAXQ,EAWN,CAACH,WAAD,CAXM,CAAT;AAaA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAG,IAAA,SAAS,EAAC;AAAb,IADF,EAEE,MAAC,YAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,OAAO,EAAEA,WAFX;AAGE,IAAA,cAAc,EAAE,wBAAAyB,MAAM;AAAA,uBAAOA,MAAM,CAACM,IAAd,gBAAwBN,MAAM,CAACnB,IAA/B;AAAA,KAHxB;AAIE,IAAA,KAAK,EAAE;AAAEgB,MAAAA,KAAK,EAAE,OAAT;AAAkBU,MAAAA,WAAW,EAAE;AAA/B,KAJT;AAKE,IAAA,KAAK,EAAExB,kBALT;AAME,IAAA,QAAQ,EAAEW,kBANZ;AAOE,IAAA,WAAW,EAAE,qBAAAc,MAAM,EAAI;AACrB,aACE,MAAC,SAAD,eACMA,MADN;AAEE,QAAA,KAAK,EAAE;AAAEX,UAAAA,KAAK,EAAE,MAAT;AAAiBU,UAAAA,WAAW,EAAE,MAA9B;AAAsCE,UAAAA,OAAO,EAAE;AAA/C,SAFT;AAGE,QAAA,KAAK,EAAE1B,kBAHT;AAIE,QAAA,WAAW,EAAC,0CAJd;AAKE,QAAA,OAAO,EAAC,UALV;AAME,QAAA,SAAS;AANX,SADF;AASE;AAjBN,IAFF,EAqBE,MAAC,MAAD;AACE,IAAA,KAAK,EAAEJ,GADT;AAEE,IAAA,OAAO,EAAEQ,UAFX;AAGE,IAAA,QAAQ,EAAE,kBAAAe,CAAC;AAAA,aAAID,mBAAmB,CAACC,CAAD,EAAI,KAAJ,CAAvB;AAAA,KAHb;AAIE,IAAA,WAAW,EAAEvB,GAJf;AAKE,IAAA,YAAY,EAAE,KALhB;AAME,IAAA,SAAS,EAAC;AANZ,IArBF,EA6BE,MAAC,MAAD;AACE,IAAA,KAAK,EAAEE,IADT;AAEE,IAAA,OAAO,EAAEI,WAFX;AAGE,IAAA,QAAQ,EAAE,kBAAAiB,CAAC;AAAA,aAAID,mBAAmB,CAACC,CAAD,EAAI,MAAJ,CAAvB;AAAA,KAHb;AAIE,IAAA,WAAW,EAAErB,IAJf;AAKE,IAAA,YAAY,EAAE,KALhB;AAME,IAAA,SAAS,EAAC;AANZ,IA7BF,EAqCE;AAAQ,IAAA,SAAS,EAAC,4BAAlB;AAA+C,IAAA,OAAO,EAAEwB;AAAxD,wBArCF,CADF,EAyCE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAmC,IAAA,OAAO,EAAED;AAA5C,KACG5B,OAAO,GAAG,iBAAH,GAAuB,mBADjC,EAEE;AACE,IAAA,KAAK,EAAE;AACLkC,MAAAA,cAAc,EAAElC,OAAO,GAAG,UAAH,GAAgB,YADlC;AAELmC,MAAAA,eAAe,EAAEnC,OAAO,GAAG,SAAH,GAAe;AAFlC,KADT;AAKE,IAAA,SAAS,EAAC;AALZ,KAME;AAAK,IAAA,SAAS,EAAC;AAAf,IANF,CAFF,CADF,CAzCF,CADF;AAyDD,CA/KD;;AAiLA,IAAMoC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLtC,IAAAA,WAAW,EAAEsC,KAAK,CAACtC,WADd;AAELC,IAAAA,OAAO,EAAEqC,KAAK,CAACrC;AAFV,GAAP;AAID,CALD;;AAOA,IAAMsC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO1D,kBAAkB,CAAC;AAAEK,IAAAA,cAAc,EAAdA,cAAF;AAAkBC,IAAAA,gBAAgB,EAAhBA,gBAAlB;AAAoCC,IAAAA,eAAe,EAAfA,eAApC;AAAqDC,IAAAA,SAAS,EAATA,SAArD;AAAgEC,IAAAA,qBAAqB,EAArBA,qBAAhE;AAAuFC,IAAAA,mBAAmB,EAAnBA;AAAvF,GAAD,EAA+GgD,QAA/G,CAAzB;AACD,CAFD;;AAIA,eAAezD,OAAO,CAACsD,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CzC,YAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Select from 'react-select';\n\nimport { \n  setRestaurants,\n  searchRestaurant, \n  sortRestaurants,\n  toggleMap,\n  centerMapWithLocation,\n  toggleListingAwards,\n} from \"../../actions\";\nimport { INIT_ARR_OPTIONS, INIT_TYPE_OPTIONS } from \"../../constants/filter-options\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { filterArrByType, filterTypeByArr } from './helper';\n\n\nconst SearchByName = props => {\n  const { \n    restaurants,\n    searchRestaurant,\n    centerMapWithLocation,\n    toggleListingAwards,\n    sortRestaurants,\n    toggleMap,\n    showMap,\n    homeArr,\n    homeType\n  } = props;\n  const [arr, setArr] = useState(\"Tous les arr.\");\n  const [type, setType] = useState(\"Tous les types\");\n  const [searchedRestaurant, setSearchedRestaurant] = useState(null);\n  const [typeOptions, setTypeOptions] = useState(INIT_TYPE_OPTIONS);\n  const [arrOptions, setArrOptions] = useState(INIT_ARR_OPTIONS);\n  const windowSize = useWindowSize();\n\n  const scrollToTop = () => {\n    document.querySelector(\".tab-number-0\").scrollIntoView();\n  };\n\n  const handleSearchChange = (event, value) => {\n    setSearchedRestaurant(value);\n    setArr(\"Tous les arr.\");\n    setType(\"Tous les types\");\n    toggleListingAwards(false);\n\n    if (value) {\n      searchRestaurant([value]);\n    } else {\n      searchRestaurant(null);\n      setRestaurants();\n    }\n\n    if (windowSize.width > 728) {\n      scrollToTop();\n    }\n  }\n\n  const filterList = (list, option) => {\n    setSearchedRestaurant(null);\n    searchRestaurant(null);\n    toggleListingAwards(false);\n\n    if (option === \"type\") {\n      centerMapWithLocation(null);\n      filterArrByType(list, arr, restaurants, setArrOptions, sortRestaurants);\n    } else {\n      centerMapWithLocation(arr);\n      filterTypeByArr(list, type, restaurants, setTypeOptions, sortRestaurants);\n    }\n\n    if ((windowSize.width > 728 && (option === \"arr\" && !homeArr)) || \n      (windowSize.width > 728 && (option === \"type\" && !homeType))) {\n      scrollToTop();\n    }\n  }\n\n  const handleOptionsChange = (e, option) => {\n    const selectedValue = e.value;\n\n    if (option === \"type\") {\n      setType(selectedValue);\n    } else {\n      setArr(selectedValue);\n    }\n    filterList(selectedValue, option);\n  };\n\n  const handleToggleMap = () => {\n    toggleMap(showMap)\n  };\n\n  const reinitializeFilters = () => {\n    // empty autocomplete input\n    searchRestaurant(null);\n    setSearchedRestaurant(null);\n\n    // resort Restaurants by rate\n    sortRestaurants([]);\n    // display all Restaurants\n    setRestaurants();\n\n    // reinit filter options\n    setTypeOptions(INIT_TYPE_OPTIONS);\n    setArrOptions(INIT_ARR_OPTIONS);\n\n    // set default values\n    setArr(\"Tous les arr.\");\n    setType(\"Tous les types\");\n\n    // reset map location\n    centerMapWithLocation(null);\n\n    // show awards selection again\n    toggleListingAwards(true);\n\n    // scroll to top only after the list is re-rendered\n    if (windowSize.width > 728) {\n      scrollToTop();\n    }\n  };\n\n  useEffect(() => {\n    if (restaurants && homeArr && homeArr !== \"Tous les arr.\") {\n      setArr(homeArr);\n      filterList(homeArr, \"arr\");\n    };\n\n    if (restaurants && homeType && homeType !== \"Tous les types\") {\n      setType(homeType);\n      filterList(homeType, \"type\");\n    };\n  // eslint-disable-next-line\n  }, [restaurants])\n\n  return (\n    <div className=\"filters\">\n      <div className=\"filters-left\">\n        <i className=\"fas fa-search\" />\n        <Autocomplete\n          id=\"search-by-name\"\n          options={restaurants}\n          getOptionLabel={option => `${option.name} - ${option.type}`}\n          style={{ width: \"300px\", marginRight: \"10px\"}}\n          value={searchedRestaurant}\n          onChange={handleSearchChange}\n          renderInput={params => {\n            return (\n              <TextField \n                {...params}\n                style={{ width: \"100%\", marginRight: \"20px\", padding: \"0px\"}}\n                value={searchedRestaurant}\n                placeholder=\"Rechercher par nom ou type de restaurant\"\n                variant=\"outlined\"\n                fullWidth\n              />\n            )}}\n        />\n        <Select\n          value={arr}\n          options={arrOptions}\n          onChange={e => handleOptionsChange(e, \"arr\")}\n          placeholder={arr}\n          isSearchable={false}\n          className=\"filters-react-select filter-arr\"\n        />\n        <Select\n          value={type}\n          options={typeOptions} \n          onChange={e => handleOptionsChange(e, \"type\")} \n          placeholder={type}\n          isSearchable={false}\n          className=\"filters-react-select filter-type\"\n        />\n        <button className=\"button-filter-reinitialize\" onClick={reinitializeFilters}>Réinitialiser</button>\n      </div>\n\n      <div className=\"filters-right\">\n        <div className=\"button-toggle-map\" onClick={handleToggleMap}>\n          {showMap ? \"Cacher la carte\" : \"Afficher la carte\"}\n          <div \n            style={{ \n              justifyContent: showMap ? \"flex-end\" : \"flex-start\",\n              backgroundColor: showMap ? \"#ea4235\" : \"#ff6643\"\n            }}\n            className=\"switch-toggle-map\">\n            <div className=\"toggle-circle\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return { \n    restaurants: state.restaurants,\n    showMap: state.showMap,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ setRestaurants, searchRestaurant, sortRestaurants, toggleMap, centerMapWithLocation, toggleListingAwards }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchByName);\n"]},"metadata":{},"sourceType":"module"}