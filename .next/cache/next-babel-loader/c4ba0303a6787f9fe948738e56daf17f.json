{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport ScrollIntoView from 'react-scroll-into-view';\nimport Badge from \"../common/badge\";\nimport { useComponentVisible } from \"../../hooks/useRef\"; // key = légende\n\nvar Key = function Key(props) {\n  var listedRestaurants = props.listedRestaurants;\n\n  var _useComponentVisible = useComponentVisible(false),\n      ref = _useComponentVisible.ref,\n      isComponentVisible = _useComponentVisible.isComponentVisible,\n      setIsComponentVisible = _useComponentVisible.setIsComponentVisible;\n\n  var _useState = useState([]),\n      restaurantsWithAward = _useState[0],\n      setRestaurantsWithAward = _useState[1];\n\n  useEffect(function () {\n    var awards = listedRestaurants.filter(function (restaurant) {\n      return restaurant.award;\n    });\n    setRestaurantsWithAward(awards);\n  }, [listedRestaurants]);\n  return restaurantsWithAward.length > 0 ? __jsx(\"div\", {\n    className: \"keys-wrapper\"\n  }, __jsx(\"div\", {\n    className: \"selection-button\",\n    onClick: function onClick() {\n      return setIsComponentVisible(true);\n    }\n  }, \"Awards \", __jsx(\"i\", {\n    className: \"fas fa-chevron-down\"\n  })), isComponentVisible && __jsx(\"div\", {\n    ref: ref,\n    className: \"filter-selection-wrapper\"\n  }, restaurantsWithAward.map(function (restaurant) {\n    return __jsx(ScrollIntoView, {\n      key: restaurant.award.scroll,\n      selector: \"#\".concat(restaurant.award.scroll)\n    }, __jsx(Badge, {\n      icon: restaurant.award.icon,\n      description: restaurant.award.description\n    }));\n  }))) : null;\n};\n\nexport default Key;","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/common/key.jsx"],"names":["React","useState","useEffect","ScrollIntoView","Badge","useComponentVisible","Key","props","listedRestaurants","ref","isComponentVisible","setIsComponentVisible","restaurantsWithAward","setRestaurantsWithAward","awards","filter","restaurant","award","length","map","scroll","icon","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,mBAAT,QAAoC,oBAApC,C,CAEA;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,KAAK,EAAI;AAAA,MACXC,iBADW,GACWD,KADX,CACXC,iBADW;;AAAA,6BAEwCH,mBAAmB,CAAC,KAAD,CAF3D;AAAA,MAEXI,GAFW,wBAEXA,GAFW;AAAA,MAENC,kBAFM,wBAENA,kBAFM;AAAA,MAEcC,qBAFd,wBAEcA,qBAFd;;AAAA,kBAGqCV,QAAQ,CAAC,EAAD,CAH7C;AAAA,MAGZW,oBAHY;AAAA,MAGUC,uBAHV;;AAKnBX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMY,MAAM,GAAGN,iBAAiB,CAACO,MAAlB,CAAyB,UAAAC,UAAU;AAAA,aAAIA,UAAU,CAACC,KAAf;AAAA,KAAnC,CAAf;AACAJ,IAAAA,uBAAuB,CAACC,MAAD,CAAvB;AACD,GAHQ,EAGN,CAACN,iBAAD,CAHM,CAAT;AAKA,SAAOI,oBAAoB,CAACM,MAArB,GAA8B,CAA9B,GACL;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,OAAO,EAAE;AAAA,aAAMP,qBAAqB,CAAC,IAAD,CAA3B;AAAA;AAA3C,gBACS;AAAG,IAAA,SAAS,EAAC;AAAb,IADT,CADF,EAIGD,kBAAkB,IACjB;AAAK,IAAA,GAAG,EAAED,GAAV;AAAe,IAAA,SAAS,EAAC;AAAzB,KACGG,oBAAoB,CAACO,GAArB,CAAyB,UAAAH,UAAU,EAAI;AACtC,WACE,MAAC,cAAD;AAAgB,MAAA,GAAG,EAAEA,UAAU,CAACC,KAAX,CAAiBG,MAAtC;AAA8C,MAAA,QAAQ,aAAMJ,UAAU,CAACC,KAAX,CAAiBG,MAAvB;AAAtD,OACE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAEJ,UAAU,CAACC,KAAX,CAAiBI,IAA9B;AAAoC,MAAA,WAAW,EAAEL,UAAU,CAACC,KAAX,CAAiBK;AAAlE,MADF,CADF;AAKD,GANA,CADH,CALJ,CADK,GAgBH,IAhBJ;AAiBD,CA3BD;;AA6BA,eAAehB,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ScrollIntoView from 'react-scroll-into-view';\n\nimport Badge from \"../common/badge\";\nimport { useComponentVisible } from \"../../hooks/useRef\";\n\n// key = légende\nconst Key = props => {\n  const { listedRestaurants } = props;\n  const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n  const [restaurantsWithAward, setRestaurantsWithAward] = useState([]);\n\n  useEffect(() => {\n    const awards = listedRestaurants.filter(restaurant => restaurant.award);\n    setRestaurantsWithAward(awards);\n  }, [listedRestaurants]);\n\n  return restaurantsWithAward.length > 0 ? (\n    <div className=\"keys-wrapper\">\n      <div className=\"selection-button\" onClick={() => setIsComponentVisible(true)}> \n        Awards <i className=\"fas fa-chevron-down\" />\n      </div>\n      {isComponentVisible &&\n        <div ref={ref} className=\"filter-selection-wrapper\">\n          {restaurantsWithAward.map(restaurant => {\n            return (\n              <ScrollIntoView key={restaurant.award.scroll} selector={`#${restaurant.award.scroll}`}>\n                <Badge icon={restaurant.award.icon} description={restaurant.award.description} />\n              </ScrollIntoView>\n            )\n          })}\n        </div>}\n    </div>\n  ) : null;\n};\n\nexport default Key;\n"]},"metadata":{},"sourceType":"module"}