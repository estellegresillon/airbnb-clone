{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"next/router\";\nimport RestaurantList from \"./restaurant-list\";\nimport Map from \"./map\";\nimport Filters from \"./filters\";\nimport Key from \"../common/key\";\nimport { setRestaurants } from \"../../actions\";\n\nvar Restaurants = function Restaurants(props) {\n  var restaurants = props.restaurants,\n      setRestaurants = props.setRestaurants,\n      sortedRestaurants = props.sortedRestaurants,\n      searchedRestaurant = props.searchedRestaurant,\n      router = props.router;\n\n  var _useState = useState(null),\n      listNumber = _useState[0],\n      setListNumber = _useState[1];\n\n  var _useState2 = useState(restaurants),\n      listedRestaurants = _useState2[0],\n      setListedRestaurants = _useState2[1]; // load restaurants and sort them\n\n\n  useEffect(function () {\n    setRestaurants();\n  }, [setRestaurants]); // filters restaurants\n\n  useEffect(function () {\n    // 1 - priority on autocomplete, displays only one restaurant\n    // 2 - if not any restaurant is searched, display the filtered Restaurants\n    // 3 - if not any restaurant is searched nor filtered, displays all Restaurants\n    // never display 0 Restaurants\n    if (searchedRestaurant) {\n      setListNumber(1);\n      setListedRestaurants(searchedRestaurant);\n    } else {\n      if (sortedRestaurants.length) {\n        setListNumber(sortedRestaurants.length);\n        setListedRestaurants(sortedRestaurants);\n      } else {\n        setListNumber(restaurants.length);\n        setListedRestaurants(restaurants);\n      }\n    }\n  }, [restaurants, sortedRestaurants, searchedRestaurant]);\n  return __jsx(\"div\", {\n    className: \"restaurants-page-wrapper\"\n  }, __jsx(Filters, {\n    homeArr: router ? router.query.homeArr : \"Tous les arr.\",\n    homeType: router ? router.query.homeType : \"Tous les types\"\n  }), __jsx(\"div\", {\n    className: \"counter-keys-wrapper\"\n  }, __jsx(\"div\", {\n    className: \"restaurant-counter\"\n  }, listNumber, listNumber === 1 ? \" restaurant correspond à votre recherche.\" : \" restaurants correspondent à votre recherche.\"), __jsx(Key, {\n    listedRestaurants: listedRestaurants\n  })), __jsx(\"div\", {\n    className: \"main-view\"\n  }, __jsx(RestaurantList, {\n    listedRestaurants: listedRestaurants\n  }), __jsx(Map, {\n    listedRestaurants: listedRestaurants\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    restaurants: state.restaurants,\n    searchedRestaurant: state.searchedRestaurant,\n    sortedRestaurants: state.sortedRestaurants\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setRestaurants: setRestaurants\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Restaurants));","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/restaurants/restaurants.jsx"],"names":["React","useState","useEffect","bindActionCreators","connect","withRouter","RestaurantList","Map","Filters","Key","setRestaurants","Restaurants","props","restaurants","sortedRestaurants","searchedRestaurant","router","listNumber","setListNumber","listedRestaurants","setListedRestaurants","length","query","homeArr","homeType","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AAEA,SAASC,cAAT,QAA+B,eAA/B;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,MACnBC,WADmB,GAC4DD,KAD5D,CACnBC,WADmB;AAAA,MACNH,cADM,GAC4DE,KAD5D,CACNF,cADM;AAAA,MACUI,iBADV,GAC4DF,KAD5D,CACUE,iBADV;AAAA,MAC6BC,kBAD7B,GAC4DH,KAD5D,CAC6BG,kBAD7B;AAAA,MACiDC,MADjD,GAC4DJ,KAD5D,CACiDI,MADjD;;AAAA,kBAESf,QAAQ,CAAC,IAAD,CAFjB;AAAA,MAEpBgB,UAFoB;AAAA,MAERC,aAFQ;;AAAA,mBAGuBjB,QAAQ,CAACY,WAAD,CAH/B;AAAA,MAGpBM,iBAHoB;AAAA,MAGDC,oBAHC,kBAK3B;;;AACAlB,EAAAA,SAAS,CAAC,YAAM;AAAEQ,IAAAA,cAAc;AAAK,GAA5B,EAA8B,CAACA,cAAD,CAA9B,CAAT,CAN2B,CAQ3B;;AACAR,EAAAA,SAAS,CAAC,YAAM;AACd;AACA;AACA;AACA;AACA,QAAIa,kBAAJ,EAAwB;AACtBG,MAAAA,aAAa,CAAC,CAAD,CAAb;AACAE,MAAAA,oBAAoB,CAACL,kBAAD,CAApB;AACD,KAHD,MAGO;AACL,UAAID,iBAAiB,CAACO,MAAtB,EAA8B;AAC5BH,QAAAA,aAAa,CAACJ,iBAAiB,CAACO,MAAnB,CAAb;AACAD,QAAAA,oBAAoB,CAACN,iBAAD,CAApB;AACD,OAHD,MAGO;AACLI,QAAAA,aAAa,CAACL,WAAW,CAACQ,MAAb,CAAb;AACAD,QAAAA,oBAAoB,CAACP,WAAD,CAApB;AACD;AACF;AACF,GAjBQ,EAiBN,CAACA,WAAD,EAAcC,iBAAd,EAAiCC,kBAAjC,CAjBM,CAAT;AAmBA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAEC,MAAM,GAAGA,MAAM,CAACM,KAAP,CAAaC,OAAhB,GAA0B,eAAlD;AAAmE,IAAA,QAAQ,EAAEP,MAAM,GAAGA,MAAM,CAACM,KAAP,CAAaE,QAAhB,GAA4B;AAA/G,IADF,EAEE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGP,UADH,EAEGA,UAAU,KAAK,CAAf,GAAmB,2CAAnB,GAAiE,+CAFpE,CADF,EAKE,MAAC,GAAD;AAAK,IAAA,iBAAiB,EAAEE;AAAxB,IALF,CAFF,EASE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,cAAD;AAAgB,IAAA,iBAAiB,EAAEA;AAAnC,IADF,EAEE,MAAC,GAAD;AAAK,IAAA,iBAAiB,EAAEA;AAAxB,IAFF,CATF,CADF;AAgBD,CA5CD;;AA8CA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLb,IAAAA,WAAW,EAAEa,KAAK,CAACb,WADd;AAELE,IAAAA,kBAAkB,EAAEW,KAAK,CAACX,kBAFrB;AAGLD,IAAAA,iBAAiB,EAAEY,KAAK,CAACZ;AAHpB,GAAP;AAKD,CAND;;AAQA,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAOzB,kBAAkB,CAAC;AAAEO,IAAAA,cAAc,EAAdA;AAAF,GAAD,EAAqBkB,QAArB,CAAzB;AACD,CAFD;;AAIA,eAAexB,OAAO,CAACqB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CtB,UAAU,CAACM,WAAD,CAAvD,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"next/router\";\n\nimport RestaurantList from \"./restaurant-list\";\nimport Map from \"./map\";\nimport Filters from \"./filters\";\nimport Key from \"../common/key\";\n\nimport { setRestaurants } from \"../../actions\";\n\nconst Restaurants = props => {\n  const { restaurants, setRestaurants, sortedRestaurants, searchedRestaurant, router } = props;\n  const [listNumber, setListNumber] = useState(null);\n  const [listedRestaurants, setListedRestaurants] = useState(restaurants);\n\n  // load restaurants and sort them\n  useEffect(() => { setRestaurants(); }, [setRestaurants]);\n\n  // filters restaurants\n  useEffect(() => {\n    // 1 - priority on autocomplete, displays only one restaurant\n    // 2 - if not any restaurant is searched, display the filtered Restaurants\n    // 3 - if not any restaurant is searched nor filtered, displays all Restaurants\n    // never display 0 Restaurants\n    if (searchedRestaurant) {\n      setListNumber(1)\n      setListedRestaurants(searchedRestaurant)\n    } else {\n      if (sortedRestaurants.length) {\n        setListNumber(sortedRestaurants.length)\n        setListedRestaurants(sortedRestaurants)\n      } else {\n        setListNumber(restaurants.length)\n        setListedRestaurants(restaurants)\n      }\n    }\n  }, [restaurants, sortedRestaurants, searchedRestaurant]);\n\n  return (\n    <div className=\"restaurants-page-wrapper\">\n      <Filters homeArr={router ? router.query.homeArr : \"Tous les arr.\"} homeType={router ? router.query.homeType  : \"Tous les types\"} />\n      <div className=\"counter-keys-wrapper\">\n        <div className=\"restaurant-counter\">\n          {listNumber}\n          {listNumber === 1 ? \" restaurant correspond à votre recherche.\" : \" restaurants correspondent à votre recherche.\"}\n        </div>\n        <Key listedRestaurants={listedRestaurants} />\n      </div>\n      <div className=\"main-view\">\n        <RestaurantList listedRestaurants={listedRestaurants} />\n        <Map listedRestaurants={listedRestaurants} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return { \n    restaurants: state.restaurants,\n    searchedRestaurant: state.searchedRestaurant,\n    sortedRestaurants: state.sortedRestaurants\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ setRestaurants }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Restaurants));\n"]},"metadata":{},"sourceType":"module"}