{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Router from \"next/router\";\nimport { withRouter } from \"next/router\";\nimport { setRestaurants } from \"../../actions\";\nimport PopIn from \"./pop-in\";\nimport TopSection from \"./top-section\";\nimport MiddleSection from \"./middle-section\";\nimport BottomSection from \"./bottom-section\";\nimport Footer from \"./footer\";\n\nvar Detail = function Detail(props) {\n  var setRestaurants = props.setRestaurants,\n      restaurants = props.restaurants,\n      match = props.match,\n      router = props.router; // const [restaurant, setRestaurant] = useState({})\n  // const [hasSeenSuggestion, setHasSeenSuggestion] = useState(false)\n  // const [similarRestaurants, setSimilarRestaurants] = useState([])\n  // const nextRestaurantRef = useRef(null);\n  // const previousRestaurantRef = useRef(null);\n  // const detailPageTop = useRef(null);\n  // const listedRestaurants = router.query.listedRestaurants;\n  // const setNavigation = restaurantList => {\n  //   let previous;\n  //   let next;\n  //   restaurantList.forEach((val, i) => {\n  //     if (val.id.toString() === match.params.id) {\n  //       previous = restaurantList[i - 1];\n  //       next = restaurantList[i + 1];\n  //     };\n  //   });\n  //   if (previous) {\n  //     previousRestaurantRef.current = previous.id;\n  //   } else previousRestaurantRef.current = null;\n  //   if (next) {\n  //     nextRestaurantRef.current = next.id;\n  //   } else nextRestaurantRef.current = null;\n  // };\n  // const scrollToTop = () => {\n  //   detailPageTop.current.scrollIntoView();\n  // }\n  // if a user arrives on the pageId directly \n  // he doesn't get the restaurantS or listedRestaurantS objects in the props\n  // useEffect(() => { \n  //   if (!router.query.restaurant) {\n  //     setRestaurants(); \n  //   }\n  // }, [router.query.restaurant, setRestaurants]);\n  // useEffect(() => {\n  // if (router.query.listedRestaurants) {\n  //   setNavigation(router.query.listedRestaurants);\n  // } else {\n  //   setNavigation(restaurants);\n  // };\n  //     if (router.query.restaurant) {\n  //       setRestaurant(router.query.restaurant);\n  //       const filterByType = [...restaurants].filter(val => {\n  //         if (val.type && val.name !== router.query.restaurant.name) {\n  //           return val.type === router.query.restaurant.type;\n  //         } else return null;\n  //       });\n  //       setSimilarRestaurants(filterByType.slice(0, 9));\n  //     } else {\n  //       const detailRestaurant = [...restaurants].filter(val => {\n  //         if (val.id) {\n  //           return val.id.toString() === match.params.id;\n  //         } else return null;\n  //       });\n  //       setRestaurant(detailRestaurant[0]);\n  //       const filterByType = [...restaurants].filter(val => {\n  //         if (val.type && val.name !== detailRestaurant[0].name) {\n  //           return val.type === detailRestaurant[0].type;\n  //         } else return null;\n  //       });\n  //       setSimilarRestaurants(filterByType.slice(0, 9));\n  //     };\n  //   // eslint-disable-next-line\n  //   }, [router.query.restaurant, restaurants, match.params.id]);\n  //   const handleKeyDown = e => {\n  //     // 37 arrow left / 39 arrow right\n  //     if (e.keyCode === 37) {\n  //       if (previousRestaurantRef.current) {\n  //         Router.push({ pathname: `/detail/${previousRestaurantRef.current}`, query: { listedRestaurants } });\n  //       };\n  //     } else if (e.keyCode === 39) {\n  //       if (nextRestaurantRef.current) {\n  //         Router.push({ pathname: `/detail/${nextRestaurantRef.current}`, query: { listedRestaurants } });\n  //       };\n  //     };\n  //     scrollToTop();\n  //   };\n  //   const handleNavigation = (direction, id) => {\n  //     if (direction === \"left\") {\n  //       if (previousRestaurantRef.current) {\n  //         Router.push({ pathname: `/detail/${previousRestaurantRef.current}`, query: { listedRestaurants } });\n  //       };\n  //     } else if (direction === \"next-page\") {\n  //       Router.push({ pathname: `/detail/${id}`, query: { listedRestaurants } });\n  //     } else if (direction === \"right\") {\n  //       if (nextRestaurantRef.current) {\n  //         Router.push({ pathname: `/detail/${nextRestaurantRef.current}`, query: { listedRestaurants } });\n  //       };\n  //     };\n  //     scrollToTop();\n  //   };\n  //   useEffect(() => { \n  //     window.addEventListener(\"keydown\", handleKeyDown, true);\n  //     return () => window.removeEventListener(\"keydown\", handleKeyDown, true);\n  //   // eslint-disable-next-line\n  //   }, []);\n  //   useEffect(() => {\n  //     const disclaimer = localStorage.getItem('has_seen_suggestion');\n  //     disclaimer ? setHasSeenSuggestion(true) : setHasSeenSuggestion(false);\n  //   }, []);\n\n  console.log(router.query.slug);\n  return __jsx(React.Fragment, null, router.query.slug);\n}; // const mapStateToProps = state => {\n//   return {\n//     restaurants: state.restaurants,\n//   };\n// };\n// const mapDispatchToProps = dispatch => {\n//   return bindActionCreators({ setRestaurants }, dispatch);\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(withRouter(Detail));\n\n\nexport default Detail;","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/detail/detail.jsx"],"names":["React","useState","useEffect","useRef","connect","bindActionCreators","Router","withRouter","setRestaurants","PopIn","TopSection","MiddleSection","BottomSection","Footer","Detail","props","restaurants","match","router","console","log","query","slug"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK,EAAI;AAAA,MACdP,cADc,GACiCO,KADjC,CACdP,cADc;AAAA,MACEQ,WADF,GACiCD,KADjC,CACEC,WADF;AAAA,MACeC,KADf,GACiCF,KADjC,CACeE,KADf;AAAA,MACsBC,MADtB,GACiCH,KADjC,CACsBG,MADtB,EAEtaC,IAAzB;AACA,SACE,4BACGJ,MAAM,CAACG,KAAP,CAAaC,IADhB,CADF;AAKD,CA5HD,C,CA8HA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AACA,eAAeR,MAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Router from \"next/router\";\nimport { withRouter } from \"next/router\";\n\nimport { setRestaurants } from \"../../actions\";\nimport PopIn from \"./pop-in\";\nimport TopSection from \"./top-section\";\nimport MiddleSection from \"./middle-section\";\nimport BottomSection from \"./bottom-section\";\nimport Footer from \"./footer\";\n\nconst Detail = props => {\n  const { setRestaurants, restaurants, match, router } = props;\n  // const [restaurant, setRestaurant] = useState({})\n  // const [hasSeenSuggestion, setHasSeenSuggestion] = useState(false)\n  // const [similarRestaurants, setSimilarRestaurants] = useState([])\n  // const nextRestaurantRef = useRef(null);\n  // const previousRestaurantRef = useRef(null);\n  // const detailPageTop = useRef(null);\n  // const listedRestaurants = router.query.listedRestaurants;\n  \n  // const setNavigation = restaurantList => {\n  //   let previous;\n  //   let next;\n\n  //   restaurantList.forEach((val, i) => {\n  //     if (val.id.toString() === match.params.id) {\n  //       previous = restaurantList[i - 1];\n  //       next = restaurantList[i + 1];\n  //     };\n  //   });\n\n  //   if (previous) {\n  //     previousRestaurantRef.current = previous.id;\n  //   } else previousRestaurantRef.current = null;\n  //   if (next) {\n  //     nextRestaurantRef.current = next.id;\n  //   } else nextRestaurantRef.current = null;\n  // };\n\n  // const scrollToTop = () => {\n  //   detailPageTop.current.scrollIntoView();\n  // }\n\n  // if a user arrives on the pageId directly \n  // he doesn't get the restaurantS or listedRestaurantS objects in the props\n  // useEffect(() => { \n  //   if (!router.query.restaurant) {\n  //     setRestaurants(); \n  //   }\n  // }, [router.query.restaurant, setRestaurants]);\n\n  // useEffect(() => {\n    // if (router.query.listedRestaurants) {\n    //   setNavigation(router.query.listedRestaurants);\n    // } else {\n    //   setNavigation(restaurants);\n    // };\n\n//     if (router.query.restaurant) {\n//       setRestaurant(router.query.restaurant);\n//       const filterByType = [...restaurants].filter(val => {\n//         if (val.type && val.name !== router.query.restaurant.name) {\n//           return val.type === router.query.restaurant.type;\n//         } else return null;\n//       });\n  \n//       setSimilarRestaurants(filterByType.slice(0, 9));\n//     } else {\n//       const detailRestaurant = [...restaurants].filter(val => {\n//         if (val.id) {\n//           return val.id.toString() === match.params.id;\n//         } else return null;\n//       });\n  \n//       setRestaurant(detailRestaurant[0]);\n\n//       const filterByType = [...restaurants].filter(val => {\n//         if (val.type && val.name !== detailRestaurant[0].name) {\n//           return val.type === detailRestaurant[0].type;\n//         } else return null;\n//       });\n  \n//       setSimilarRestaurants(filterByType.slice(0, 9));\n//     };\n//   // eslint-disable-next-line\n//   }, [router.query.restaurant, restaurants, match.params.id]);\n\n//   const handleKeyDown = e => {\n//     // 37 arrow left / 39 arrow right\n//     if (e.keyCode === 37) {\n//       if (previousRestaurantRef.current) {\n//         Router.push({ pathname: `/detail/${previousRestaurantRef.current}`, query: { listedRestaurants } });\n//       };\n//     } else if (e.keyCode === 39) {\n//       if (nextRestaurantRef.current) {\n//         Router.push({ pathname: `/detail/${nextRestaurantRef.current}`, query: { listedRestaurants } });\n//       };\n//     };\n\n//     scrollToTop();\n//   };\n\n//   const handleNavigation = (direction, id) => {\n//     if (direction === \"left\") {\n//       if (previousRestaurantRef.current) {\n//         Router.push({ pathname: `/detail/${previousRestaurantRef.current}`, query: { listedRestaurants } });\n//       };\n//     } else if (direction === \"next-page\") {\n//       Router.push({ pathname: `/detail/${id}`, query: { listedRestaurants } });\n//     } else if (direction === \"right\") {\n//       if (nextRestaurantRef.current) {\n//         Router.push({ pathname: `/detail/${nextRestaurantRef.current}`, query: { listedRestaurants } });\n//       };\n//     };\n\n//     scrollToTop();\n//   };\n\n//   useEffect(() => { \n//     window.addEventListener(\"keydown\", handleKeyDown, true);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown, true);\n//   // eslint-disable-next-line\n//   }, []);\n\n//   useEffect(() => {\n//     const disclaimer = localStorage.getItem('has_seen_suggestion');\n//     disclaimer ? setHasSeenSuggestion(true) : setHasSeenSuggestion(false);\n//   }, []);\n  console.log(router.query.slug)\n  return (\n    <>\n      {router.query.slug}\n    </>\n  )\n};\n\n// const mapStateToProps = state => {\n//   return {\n//     restaurants: state.restaurants,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return bindActionCreators({ setRestaurants }, dispatch);\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(withRouter(Detail));\nexport default Detail"]},"metadata":{},"sourceType":"module"}