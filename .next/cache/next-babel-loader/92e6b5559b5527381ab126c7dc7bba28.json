{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"next/link\";\nimport { LazyLoadImage, trackWindowScroll } from 'react-lazy-load-image-component';\nimport { selectRestaurant } from \"../../../actions\";\nimport Badge from \"../badge\";\nimport { useWindowSize } from \"../../../hooks/useWindowSize\";\n\nconst Card = props => {\n  const {\n    scrollPosition,\n    selectRestaurant,\n    selectedRestaurant,\n    restaurant,\n    listedRestaurants,\n    tabIndex,\n    showMap\n  } = props;\n\n  const handleClick = () => {\n    selectRestaurant(restaurant);\n  };\n\n  const windowSize = useWindowSize();\n  return __jsx(\"div\", {\n    className: `tab-number-${tabIndex} restaurant ${restaurant === selectedRestaurant ? \"selected\" : \"\"}`,\n    onClick: handleClick,\n    role: \"link\",\n    id: `${restaurant.award ? restaurant.award.scroll : \"\"}`,\n    tabIndex: tabIndex + 1\n  }, __jsx(\"div\", {\n    className: \"card\"\n  }, !showMap && __jsx(\"div\", {\n    className: \"grid-img-overlay\"\n  }), __jsx(LazyLoadImage, {\n    alt: \"restaurant-overview\",\n    scrollPosition: scrollPosition,\n    src: restaurant.imageUrl,\n    threshold: 500\n  }), restaurant.award && __jsx(Badge, {\n    icon: restaurant.award.icon,\n    description: restaurant.award.description\n  }), __jsx(\"div\", {\n    className: \"card-description\"\n  }, __jsx(\"div\", {\n    className: \"card-header\"\n  }, __jsx(\"div\", {\n    className: \"card-header-type\"\n  }, restaurant.type, \" -\", ' ', __jsx(\"span\", {\n    className: \"card-header-budget\"\n  }, restaurant.price)), __jsx(\"div\", {\n    className: \"card-header-rate\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-star\"\n  }), \" \", restaurant.rate, \" (\", restaurant.votes, \"+)\")), __jsx(\"h2\", null, restaurant.name), __jsx(\"div\", {\n    className: \"card-restaurant-address\"\n  }, restaurant.address))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedRestaurant: state.selectedrestaurant,\n    showMap: state.showMap\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    selectRestaurant\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(trackWindowScroll(Card));","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/common/card/card.jsx"],"names":["React","bindActionCreators","connect","Link","LazyLoadImage","trackWindowScroll","selectRestaurant","Badge","useWindowSize","Card","props","scrollPosition","selectedRestaurant","restaurant","listedRestaurants","tabIndex","showMap","handleClick","windowSize","award","scroll","imageUrl","icon","description","type","price","rate","votes","name","address","mapStateToProps","state","selectedrestaurant","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,aAAT,EAAwBC,iBAAxB,QAAiD,iCAAjD;AAEA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,aAAT,QAA8B,8BAA9B;;AAEA,MAAMC,IAAI,GAAGC,KAAK,IAAI;AACpB,QAAM;AACJC,IAAAA,cADI;AAEJL,IAAAA,gBAFI;AAGJM,IAAAA,kBAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,iBALI;AAMJC,IAAAA,QANI;AAOJC,IAAAA;AAPI,MAQFN,KARJ;;AAUA,QAAMO,WAAW,GAAG,MAAM;AACxBX,IAAAA,gBAAgB,CAACO,UAAD,CAAhB;AACD,GAFD;;AAIA,QAAMK,UAAU,GAAGV,aAAa,EAAhC;AAEA,SACE;AACE,IAAA,SAAS,EAAG,cAAaO,QAAS,eAAcF,UAAU,KAAKD,kBAAf,GAAoC,UAApC,GAAiD,EAAG,EADtG;AAEE,IAAA,OAAO,EAAEK,WAFX;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,EAAE,EAAG,GAAEJ,UAAU,CAACM,KAAX,GAAmBN,UAAU,CAACM,KAAX,CAAiBC,MAApC,GAA6C,EAAG,EAJzD;AAKE,IAAA,QAAQ,EAAEL,QAAQ,GAAG;AALvB,KAUE;AAAK,IAAA,SAAS,EAAC;AAAf,KACG,CAACC,OAAD,IAAY;AAAK,IAAA,SAAS,EAAC;AAAf,IADf,EAEE,MAAC,aAAD;AACE,IAAA,GAAG,EAAC,qBADN;AAEE,IAAA,cAAc,EAAEL,cAFlB;AAGE,IAAA,GAAG,EAAEE,UAAU,CAACQ,QAHlB;AAIE,IAAA,SAAS,EAAE;AAJb,IAFF,EASGR,UAAU,CAACM,KAAX,IACC,MAAC,KAAD;AACE,IAAA,IAAI,EAAEN,UAAU,CAACM,KAAX,CAAiBG,IADzB;AAEE,IAAA,WAAW,EAAET,UAAU,CAACM,KAAX,CAAiBI;AAFhC,IAVJ,EAcE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGV,UAAU,CAACW,IADd,QACsB,GADtB,EAEE;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAsCX,UAAU,CAACY,KAAjD,CAFF,CADF,EAKE;AAAK,IAAA,SAAS,EAAC;AAAf,KAAkC;AAAG,IAAA,SAAS,EAAC;AAAb,IAAlC,OAAmEZ,UAAU,CAACa,IAA9E,QAAsFb,UAAU,CAACc,KAAjG,OALF,CADF,EAQE,kBAAKd,UAAU,CAACe,IAAhB,CARF,EASE;AAAK,IAAA,SAAS,EAAC;AAAf,KAA0Cf,UAAU,CAACgB,OAArD,CATF,CAdF,CAVF,CADF;AA4CD,CA7DD;;AA+DA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLnB,IAAAA,kBAAkB,EAAEmB,KAAK,CAACC,kBADrB;AAELhB,IAAAA,OAAO,EAAEe,KAAK,CAACf;AAFV,GAAP;AAID,CALD;;AAOA,MAAMiB,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAOjC,kBAAkB,CAAC;AAAEK,IAAAA;AAAF,GAAD,EAAuB4B,QAAvB,CAAzB;AACD,CAFD;;AAIA,eAAehC,OAAO,CAAC4B,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C5B,iBAAiB,CAACI,IAAD,CAA9D,CAAf","sourcesContent":["import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"next/link\";\nimport { LazyLoadImage, trackWindowScroll } from 'react-lazy-load-image-component';\n\nimport { selectRestaurant } from \"../../../actions\";\nimport Badge from \"../badge\";\nimport { useWindowSize } from \"../../../hooks/useWindowSize\";\n\nconst Card = props => {\n  const { \n    scrollPosition,\n    selectRestaurant,\n    selectedRestaurant,\n    restaurant,\n    listedRestaurants,\n    tabIndex,\n    showMap,\n  } = props;\n\n  const handleClick = () => {\n    selectRestaurant(restaurant);\n  };\n\n  const windowSize = useWindowSize();\n\n  return (\n    <div \n      className={`tab-number-${tabIndex} restaurant ${restaurant === selectedRestaurant ? \"selected\" : \"\"}`}\n      onClick={handleClick}\n      role=\"link\"\n      id={`${restaurant.award ? restaurant.award.scroll : \"\"}`}\n      tabIndex={tabIndex + 1}\n    >\n      {/* {(!showMap || (showMap && windowSize.width < 728)) &&\n        <Link href={{ pathname: `/detail/${restaurant.id}`, restaurant, listedRestaurants }} />} */}\n        \n      <div className=\"card\">\n        {!showMap && <div className=\"grid-img-overlay\" />}\n        <LazyLoadImage\n          alt=\"restaurant-overview\"\n          scrollPosition={scrollPosition}\n          src={restaurant.imageUrl}\n          threshold={500}\n        />\n\n        {restaurant.award &&\n          <Badge \n            icon={restaurant.award.icon}\n            description={restaurant.award.description} />}\n\n        <div className=\"card-description\">\n          <div className=\"card-header\">\n            <div className=\"card-header-type\">\n              {restaurant.type} -{' '}\n              <span className=\"card-header-budget\">{restaurant.price}</span>\n            </div>\n            <div className=\"card-header-rate\"><i className=\"fas fa-star\"></i> {restaurant.rate} ({restaurant.votes}+)</div>\n          </div>\n          <h2>{restaurant.name}</h2>\n          <div className=\"card-restaurant-address\">{restaurant.address}</div>\n\n          {/* {showMap && windowSize.width > 728 &&\n            <Link href={{ pathname: `/detail/${restaurant.id}`, restaurant, listedRestaurants }}>\n              <div className=\"card-see-infos\">Voir infos</div>\n            </Link>} */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return { \n    selectedRestaurant: state.selectedrestaurant,\n    showMap: state.showMap\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ selectRestaurant }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(trackWindowScroll(Card));\n"]},"metadata":{},"sourceType":"module"}