{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport { selectRestaurant } from \"../../actions\";\nimport GOOGLE_MAP_CUSTOM_SKIN from \"../../constants/google-map-skin\";\nimport { setCoordinatesWithLocation } from \"../../constants/locations-coordinates\";\n\nconst MapContainer = props => {\n  const {\n    selectRestaurant,\n    selectedRestaurant,\n    listedRestaurants,\n    showMap,\n    selectedLocation\n  } = props;\n\n  const onClick = marker => {\n    selectRestaurant(marker);\n  };\n\n  return showMap ? __jsx(\"div\", {\n    className: \"google-map\"\n  }, __jsx(MapView, {\n    selectedMarker: selectedRestaurant,\n    selectedLocation: selectedLocation,\n    markers: listedRestaurants,\n    onClick: onClick,\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyA7UHuoPJwDSGZGiPcaR4QBZW4pno1l7JE&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: __jsx(\"div\", {\n      style: {\n        height: `100%`\n      }\n    }),\n    containerElement: __jsx(\"div\", {\n      style: {\n        height: `100%`\n      }\n    }),\n    mapElement: __jsx(\"div\", {\n      style: {\n        height: `100%`\n      }\n    })\n  })) : null;\n};\n\nconst MapView = compose(withScriptjs, withGoogleMap)(props => {\n  const {\n    markers,\n    onClick,\n    selectedMarker,\n    selectedLocation\n  } = props;\n  const {\n    0: newCenter,\n    1: setNewCenter\n  } = useState({\n    lat: 48.863,\n    lng: 2.34\n  }); // center on pin if only one restaurant is selected, else center to whole paris area\n\n  useEffect(() => {\n    if (markers.length === 1) {\n      setNewCenter({\n        lat: markers[0].lat,\n        lng: markers[0].lng\n      });\n    } else {\n      if (selectedLocation) {\n        setCoordinatesWithLocation(selectedLocation, setNewCenter);\n      } else {\n        setNewCenter({\n          lat: 48.863,\n          lng: 2.34\n        });\n      }\n\n      ;\n    }\n\n    ;\n  }, [markers, selectedLocation]);\n  return __jsx(GoogleMap, {\n    defaultZoom: 13,\n    defaultOptions: {\n      styles: GOOGLE_MAP_CUSTOM_SKIN\n    },\n    center: newCenter\n  }, markers.map(marker => {\n    const onMarkerClick = onClick.bind(this, marker);\n    return __jsx(Marker, {\n      key: marker.id,\n      onClick: onMarkerClick,\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      }\n    }, selectedMarker === marker && __jsx(InfoWindow, {\n      style: {\n        padding: 0\n      }\n    }, __jsx(Link, {\n      href: {\n        pathname: `/detail/${marker.id}`,\n        query: {\n          restaurant: marker\n        }\n      }\n    }, __jsx(\"div\", {\n      className: \"marker-info-window\"\n    }, __jsx(\"img\", {\n      src: marker.imageUrl,\n      alt: \"restaurant-preview\"\n    }), __jsx(\"div\", {\n      className: \"marker-header\"\n    }, __jsx(\"i\", {\n      className: \"fas fa-star\"\n    }), __jsx(\"span\", {\n      className: \"marker-rating\"\n    }, marker.rate, \" (\", marker.votes, \"+)\")), __jsx(\"div\", {\n      className: \"marker-restaurant-name\"\n    }, marker.name), __jsx(\"div\", {\n      className: \"marker-restaurant-type\"\n    }, marker.type)))));\n  }));\n});\n\nconst mapStateToProps = state => {\n  return {\n    selectedRestaurant: state.selectedRestaurant,\n    showMap: state.showMap,\n    selectedLocation: state.selectedLocation\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    selectRestaurant\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapContainer);","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/restaurants/map.jsx"],"names":["React","useState","useEffect","Link","bindActionCreators","connect","compose","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","selectRestaurant","GOOGLE_MAP_CUSTOM_SKIN","setCoordinatesWithLocation","MapContainer","props","selectedRestaurant","listedRestaurants","showMap","selectedLocation","onClick","marker","height","MapView","markers","selectedMarker","newCenter","setNewCenter","lat","lng","length","styles","map","onMarkerClick","bind","id","padding","pathname","query","restaurant","imageUrl","rate","votes","name","type","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,UALF,QAMO,mBANP;AAQA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAOC,sBAAP,MAAmC,iCAAnC;AACA,SAASC,0BAAT,QAA2C,uCAA3C;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAG;AAC3B,QAAM;AAAEJ,IAAAA,gBAAF;AAAoBK,IAAAA,kBAApB;AAAwCC,IAAAA,iBAAxC;AAA2DC,IAAAA,OAA3D;AAAoEC,IAAAA;AAApE,MAAyFJ,KAA/F;;AAEA,QAAMK,OAAO,GAAGC,MAAM,IAAI;AACxBV,IAAAA,gBAAgB,CAACU,MAAD,CAAhB;AACD,GAFD;;AAIA,SAAOH,OAAO,GACZ;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,OAAD;AACE,IAAA,cAAc,EAAEF,kBADlB;AAEE,IAAA,gBAAgB,EAAEG,gBAFpB;AAGE,IAAA,OAAO,EAAEF,iBAHX;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,YAAY,EAAE,+HALhB;AAME,IAAA,cAAc,EAAE;AAAK,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAG;AAAX;AAAZ,MANlB;AAOE,IAAA,gBAAgB,EAAE;AAAK,MAAA,KAAK,EAAE;AAAEA,QAAAA,MAAM,EAAG;AAAX;AAAZ,MAPpB;AAQE,IAAA,UAAU,EAAE;AAAK,MAAA,KAAK,EAAE;AAAEA,QAAAA,MAAM,EAAG;AAAX;AAAZ;AARd,IADF,CADY,GAaV,IAbJ;AAcD,CArBD;;AAuBA,MAAMC,OAAO,GAAGlB,OAAO,CAACC,YAAD,EAAeC,aAAf,CAAP,CAAqCQ,KAAK,IAAI;AAC5D,QAAM;AAAES,IAAAA,OAAF;AAAWJ,IAAAA,OAAX;AAAoBK,IAAAA,cAApB;AAAoCN,IAAAA;AAApC,MAAyDJ,KAA/D;AACA,QAAM;AAAA,OAACW,SAAD;AAAA,OAAYC;AAAZ,MAA4B3B,QAAQ,CAAC;AAAE4B,IAAAA,GAAG,EAAE,MAAP;AAAeC,IAAAA,GAAG,EAAE;AAApB,GAAD,CAA1C,CAF4D,CAI5D;;AACA5B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,OAAO,CAACM,MAAR,KAAmB,CAAvB,EAA0B;AACxBH,MAAAA,YAAY,CAAC;AAAEC,QAAAA,GAAG,EAAEJ,OAAO,CAAC,CAAD,CAAP,CAAWI,GAAlB;AAAuBC,QAAAA,GAAG,EAAEL,OAAO,CAAC,CAAD,CAAP,CAAWK;AAAvC,OAAD,CAAZ;AACD,KAFD,MAEO;AACL,UAAIV,gBAAJ,EAAsB;AACpBN,QAAAA,0BAA0B,CAACM,gBAAD,EAAmBQ,YAAnB,CAA1B;AACD,OAFD,MAEO;AACLA,QAAAA,YAAY,CAAC;AAAEC,UAAAA,GAAG,EAAE,MAAP;AAAeC,UAAAA,GAAG,EAAE;AAApB,SAAD,CAAZ;AACD;;AAAA;AACF;;AAAA;AACF,GAVQ,EAUN,CAACL,OAAD,EAAUL,gBAAV,CAVM,CAAT;AAYA,SACE,MAAC,SAAD;AACE,IAAA,WAAW,EAAE,EADf;AAEE,IAAA,cAAc,EAAE;AAAEY,MAAAA,MAAM,EAAEnB;AAAV,KAFlB;AAGE,IAAA,MAAM,EAAEc;AAHV,KAIGF,OAAO,CAACQ,GAAR,CAAYX,MAAM,IAAI;AACrB,UAAMY,aAAa,GAAGb,OAAO,CAACc,IAAR,CAAa,IAAb,EAAmBb,MAAnB,CAAtB;AACA,WACE,MAAC,MAAD;AACE,MAAA,GAAG,EAAEA,MAAM,CAACc,EADd;AAEE,MAAA,OAAO,EAAEF,aAFX;AAGE,MAAA,QAAQ,EAAE;AAAEL,QAAAA,GAAG,EAAEP,MAAM,CAACO,GAAd;AAAmBC,QAAAA,GAAG,EAAER,MAAM,CAACQ;AAA/B;AAHZ,OAKGJ,cAAc,KAAKJ,MAAnB,IACC,MAAC,UAAD;AAAY,MAAA,KAAK,EAAE;AAAEe,QAAAA,OAAO,EAAE;AAAX;AAAnB,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAE;AAACC,QAAAA,QAAQ,EAAG,WAAUhB,MAAM,CAACc,EAAG,EAAhC;AAAmCG,QAAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAElB;AAAd;AAA1C;AAAZ,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAK,MAAA,GAAG,EAAEA,MAAM,CAACmB,QAAjB;AAA2B,MAAA,GAAG,EAAC;AAA/B,MADF,EAEE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAG,MAAA,SAAS,EAAC;AAAb,MADF,EAEE;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAiCnB,MAAM,CAACoB,IAAxC,QAAgDpB,MAAM,CAACqB,KAAvD,OAFF,CAFF,EAME;AAAK,MAAA,SAAS,EAAC;AAAf,OAAyCrB,MAAM,CAACsB,IAAhD,CANF,EAOE;AAAK,MAAA,SAAS,EAAC;AAAf,OAAyCtB,MAAM,CAACuB,IAAhD,CAPF,CADF,CADF,CANJ,CADF;AAsBD,GAxBA,CAJH,CADF;AAgCD,CAjDe,CAAhB;;AAmDA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACL9B,IAAAA,kBAAkB,EAAE8B,KAAK,CAAC9B,kBADrB;AAELE,IAAAA,OAAO,EAAE4B,KAAK,CAAC5B,OAFV;AAGLC,IAAAA,gBAAgB,EAAE2B,KAAK,CAAC3B;AAHnB,GAAP;AAKD,CAND;;AAQA,MAAM4B,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO7C,kBAAkB,CAAC;AAAEQ,IAAAA;AAAF,GAAD,EAAuBqC,QAAvB,CAAzB;AACD,CAFD;;AAIA,eAAe5C,OAAO,CAACyC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjC,YAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Link from \"next/link\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"recompose\"\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  InfoWindow\n} from \"react-google-maps\"\n\nimport { selectRestaurant } from \"../../actions\";\nimport GOOGLE_MAP_CUSTOM_SKIN from \"../../constants/google-map-skin\";\nimport { setCoordinatesWithLocation } from \"../../constants/locations-coordinates\";\n\nconst MapContainer = props =>{\n  const { selectRestaurant, selectedRestaurant, listedRestaurants, showMap, selectedLocation } = props;\n\n  const onClick = marker => {\n    selectRestaurant(marker);\n  };\n\n  return showMap ? (\n    <div className=\"google-map\">\n      <MapView\n        selectedMarker={selectedRestaurant}\n        selectedLocation={selectedLocation}\n        markers={listedRestaurants}\n        onClick={onClick}\n        googleMapURL={\"https://maps.googleapis.com/maps/api/js?key=AIzaSyA7UHuoPJwDSGZGiPcaR4QBZW4pno1l7JE&v=3.exp&libraries=geometry,drawing,places\"}\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `100%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    </div>\n  ) : null;\n};\n\nconst MapView = compose(withScriptjs, withGoogleMap)(props => {\n  const { markers, onClick, selectedMarker, selectedLocation } = props;\n  const [newCenter, setNewCenter] = useState({ lat: 48.863, lng: 2.34 });\n\n  // center on pin if only one restaurant is selected, else center to whole paris area\n  useEffect(() => {\n    if (markers.length === 1) {\n      setNewCenter({ lat: markers[0].lat, lng: markers[0].lng });\n    } else {\n      if (selectedLocation) {\n        setCoordinatesWithLocation(selectedLocation, setNewCenter);\n      } else {\n        setNewCenter({ lat: 48.863, lng: 2.34 });\n      };\n    };\n  }, [markers, selectedLocation]);\n\n  return (\n    <GoogleMap \n      defaultZoom={13}\n      defaultOptions={{ styles: GOOGLE_MAP_CUSTOM_SKIN }}\n      center={newCenter}>\n      {markers.map(marker => {\n        const onMarkerClick = onClick.bind(this, marker);\n        return (\n          <Marker\n            key={marker.id}\n            onClick={onMarkerClick}\n            position={{ lat: marker.lat, lng: marker.lng }}\n          >\n            {selectedMarker === marker &&\n              <InfoWindow style={{ padding: 0 }}>\n                <Link href={{pathname: `/detail/${marker.id}`, query: { restaurant: marker } }}>\n                  <div className=\"marker-info-window\">\n                    <img src={marker.imageUrl} alt=\"restaurant-preview\" />\n                    <div className=\"marker-header\">\n                      <i className=\"fas fa-star\" />\n                      <span className=\"marker-rating\">{marker.rate} ({marker.votes}+)</span>\n                    </div>\n                    <div className=\"marker-restaurant-name\">{marker.name}</div>\n                    <div className=\"marker-restaurant-type\">{marker.type}</div>\n                  </div>\n                </Link>\n              </InfoWindow>}\n          </Marker>\n        )\n      })}\n    </GoogleMap>\n  );\n});\n\nconst mapStateToProps = state => {\n  return {\n    selectedRestaurant: state.selectedRestaurant,\n    showMap: state.showMap,\n    selectedLocation: state.selectedLocation,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ selectRestaurant }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapContainer);\n"]},"metadata":{},"sourceType":"module"}