{"ast":null,"code":"var _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport { selectRestaurant } from \"../../actions\";\nimport GOOGLE_MAP_CUSTOM_SKIN from \"../../constants/google-map-skin\";\nimport { setCoordinatesWithLocation } from \"../../constants/locations-coordinates\";\n\nvar MapContainer = function MapContainer(props) {\n  var selectRestaurant = props.selectRestaurant,\n      selectedRestaurant = props.selectedRestaurant,\n      listedRestaurants = props.listedRestaurants,\n      showMap = props.showMap,\n      selectedLocation = props.selectedLocation;\n\n  var onClick = function onClick(marker) {\n    selectRestaurant(marker);\n  };\n\n  return showMap ? __jsx(\"div\", {\n    className: \"google-map\"\n  }, __jsx(MapView, {\n    selectedMarker: selectedRestaurant,\n    selectedLocation: selectedLocation,\n    markers: listedRestaurants,\n    onClick: onClick,\n    googleMapURL: process.env.REACT_APP_GOOGLE_API_KEY,\n    loadingElement: __jsx(\"div\", {\n      style: {\n        height: \"100%\"\n      }\n    }),\n    containerElement: __jsx(\"div\", {\n      style: {\n        height: \"100%\"\n      }\n    }),\n    mapElement: __jsx(\"div\", {\n      style: {\n        height: \"100%\"\n      }\n    })\n  })) : null;\n};\n\nvar MapView = compose(withScriptjs, withGoogleMap)(function (props) {\n  var markers = props.markers,\n      onClick = props.onClick,\n      selectedMarker = props.selectedMarker,\n      selectedLocation = props.selectedLocation;\n\n  var _useState = useState({\n    lat: 48.863,\n    lng: 2.34\n  }),\n      newCenter = _useState[0],\n      setNewCenter = _useState[1]; // center on pin if only one restaurant is selected, else center to whole paris area\n\n\n  useEffect(function () {\n    if (markers.length === 1) {\n      setNewCenter({\n        lat: markers[0].lat,\n        lng: markers[0].lng\n      });\n    } else {\n      if (selectedLocation) {\n        setCoordinatesWithLocation(selectedLocation, setNewCenter);\n      } else {\n        setNewCenter({\n          lat: 48.863,\n          lng: 2.34\n        });\n      }\n\n      ;\n    }\n\n    ;\n  }, [markers, selectedLocation]);\n  return __jsx(GoogleMap, {\n    defaultZoom: 13,\n    defaultOptions: {\n      styles: GOOGLE_MAP_CUSTOM_SKIN\n    },\n    center: newCenter\n  }, markers.map(function (marker) {\n    var onMarkerClick = onClick.bind(_this, marker);\n    return __jsx(Marker, {\n      key: marker.id,\n      onClick: onMarkerClick,\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      }\n    }, selectedMarker === marker && __jsx(InfoWindow, {\n      style: {\n        padding: 0\n      }\n    }, __jsx(Link, {\n      href: {\n        pathname: \"/detail/\".concat(marker.id),\n        restaurant: marker\n      }\n    }, __jsx(\"div\", {\n      className: \"marker-info-window\"\n    }, __jsx(\"img\", {\n      src: marker.imageUrl,\n      alt: \"restaurant-preview\"\n    }), __jsx(\"div\", {\n      className: \"marker-header\"\n    }, __jsx(\"i\", {\n      className: \"fas fa-star\"\n    }), __jsx(\"span\", {\n      className: \"marker-rating\"\n    }, marker.rate, \" (\", marker.votes, \"+)\")), __jsx(\"div\", {\n      className: \"marker-restaurant-name\"\n    }, marker.name), __jsx(\"div\", {\n      className: \"marker-restaurant-type\"\n    }, marker.type)))));\n  }));\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    selectedRestaurant: state.selectedRestaurant,\n    showMap: state.showMap,\n    selectedLocation: state.selectedLocation\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    selectRestaurant: selectRestaurant\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapContainer);","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/restaurants/map.jsx"],"names":["React","useState","useEffect","Link","bindActionCreators","connect","compose","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","selectRestaurant","GOOGLE_MAP_CUSTOM_SKIN","setCoordinatesWithLocation","MapContainer","props","selectedRestaurant","listedRestaurants","showMap","selectedLocation","onClick","marker","process","env","REACT_APP_GOOGLE_API_KEY","height","MapView","markers","selectedMarker","lat","lng","newCenter","setNewCenter","length","styles","map","onMarkerClick","bind","id","padding","pathname","restaurant","imageUrl","rate","votes","name","type","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Link from \"next/link\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"recompose\"\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  InfoWindow\n} from \"react-google-maps\"\n\nimport { selectRestaurant } from \"../../actions\";\nimport GOOGLE_MAP_CUSTOM_SKIN from \"../../constants/google-map-skin\";\nimport { setCoordinatesWithLocation } from \"../../constants/locations-coordinates\";\n\nconst MapContainer = props =>{\n  const { selectRestaurant, selectedRestaurant, listedRestaurants, showMap, selectedLocation } = props;\n\n  const onClick = marker => {\n    selectRestaurant(marker);\n  };\n\n  return showMap ? (\n    <div className=\"google-map\">\n      <MapView\n        selectedMarker={selectedRestaurant}\n        selectedLocation={selectedLocation}\n        markers={listedRestaurants}\n        onClick={onClick}\n        googleMapURL={process.env.REACT_APP_GOOGLE_API_KEY}\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `100%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    </div>\n  ) : null;\n};\n\nconst MapView = compose(withScriptjs, withGoogleMap)(props => {\n  const { markers, onClick, selectedMarker, selectedLocation } = props;\n  const [newCenter, setNewCenter] = useState({ lat: 48.863, lng: 2.34 });\n\n  // center on pin if only one restaurant is selected, else center to whole paris area\n  useEffect(() => {\n    if (markers.length === 1) {\n      setNewCenter({ lat: markers[0].lat, lng: markers[0].lng });\n    } else {\n      if (selectedLocation) {\n        setCoordinatesWithLocation(selectedLocation, setNewCenter);\n      } else {\n        setNewCenter({ lat: 48.863, lng: 2.34 });\n      };\n    };\n  }, [markers, selectedLocation]);\n\n  return (\n    <GoogleMap \n      defaultZoom={13}\n      defaultOptions={{ styles: GOOGLE_MAP_CUSTOM_SKIN }}\n      center={newCenter}>\n      {markers.map(marker => {\n        const onMarkerClick = onClick.bind(this, marker);\n        return (\n          <Marker\n            key={marker.id}\n            onClick={onMarkerClick}\n            position={{ lat: marker.lat, lng: marker.lng }}\n          >\n            {selectedMarker === marker &&\n              <InfoWindow style={{ padding: 0 }}>\n                <Link href={{pathname: `/detail/${marker.id}`, restaurant: marker}}>\n                  <div className=\"marker-info-window\">\n                    <img src={marker.imageUrl} alt=\"restaurant-preview\" />\n                    <div className=\"marker-header\">\n                      <i className=\"fas fa-star\" />\n                      <span className=\"marker-rating\">{marker.rate} ({marker.votes}+)</span>\n                    </div>\n                    <div className=\"marker-restaurant-name\">{marker.name}</div>\n                    <div className=\"marker-restaurant-type\">{marker.type}</div>\n                  </div>\n                </Link>\n              </InfoWindow>}\n          </Marker>\n        )\n      })}\n    </GoogleMap>\n  );\n});\n\nconst mapStateToProps = state => {\n  return {\n    selectedRestaurant: state.selectedRestaurant,\n    showMap: state.showMap,\n    selectedLocation: state.selectedLocation,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ selectRestaurant }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapContainer);\n"]},"metadata":{},"sourceType":"module"}