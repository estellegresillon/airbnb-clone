{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nexport var filterArrByType = function filterArrByType(type, arr, restaurants, setArrOptions, sortRestaurants) {\n  // sort Restaurants according to type\n  var sortedRestaurants = filterByType(restaurants, type); // we want to show only available location in the list\n\n  var newArrOptions = displayAvailableArr(sortedRestaurants);\n  setArrOptions(newArrOptions); // filter only the available cuisine types\n\n  if (arr !== \"Tous les arr.\") {\n    var sortRestaurantsByArr = filterByArr(sortedRestaurants, arr);\n    sortRestaurants(sortRestaurantsByArr);\n  } else {\n    sortRestaurants(sortedRestaurants);\n  }\n\n  ;\n};\nexport var filterTypeByArr = function filterTypeByArr(arr, type, restaurants, setTypeOptions, sortRestaurants) {\n  // sort Restaurants according to location\n  var sortedRestaurants = filterByArr(restaurants, arr); // we want to show only available cuisine type in the list\n\n  var newTypeOptions = displayAvailableType(sortedRestaurants);\n  setTypeOptions(newTypeOptions); // filter only the available locations\n\n  if (type !== \"Tous les types\") {\n    var sortRestaurantsByType = filterByType(sortedRestaurants, type);\n    sortRestaurants(sortRestaurantsByType);\n  } else {\n    sortRestaurants(sortedRestaurants);\n  }\n\n  ;\n};\n\nvar filterByType = function filterByType(restaurants, type) {\n  var sortedRestaurants = _toConsumableArray(restaurants).filter(function (val) {\n    if (val.type) {\n      return val.type === type;\n    } else return null;\n  });\n\n  return sortedRestaurants;\n};\n\nvar filterByArr = function filterByArr(restaurants, arr) {\n  var sortedRestaurants = _toConsumableArray(restaurants).filter(function (val) {\n    if (val.arr) {\n      return val.arr === arr;\n    } else return null;\n  });\n\n  return sortedRestaurants;\n};\n\nvar displayAvailableArr = function displayAvailableArr(restaurants) {\n  var arrOptions = [];\n  restaurants.forEach(function (restaurant) {\n    arrOptions.push(restaurant.arr);\n  });\n\n  var uniqueItems = _toConsumableArray(new _Set(arrOptions));\n\n  uniqueItems.sort(function (a, b) {\n    return a - b;\n  });\n  var newArrOptions = [];\n  uniqueItems.forEach(function (itm) {\n    newArrOptions.push({\n      label: itm,\n      value: itm\n    });\n  });\n  return newArrOptions;\n};\n\nvar displayAvailableType = function displayAvailableType(restaurants) {\n  var typeOptions = [];\n  restaurants.forEach(function (restaurant) {\n    typeOptions.push(restaurant.type);\n  });\n\n  var uniqueItems = _toConsumableArray(new _Set(typeOptions));\n\n  uniqueItems.sort();\n  var newTypeOptions = [];\n  uniqueItems.forEach(function (itm) {\n    newTypeOptions.push({\n      label: itm,\n      value: itm\n    });\n  });\n  return newTypeOptions;\n};","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/restaurants/helper.js"],"names":["filterArrByType","type","arr","restaurants","setArrOptions","sortRestaurants","sortedRestaurants","filterByType","newArrOptions","displayAvailableArr","sortRestaurantsByArr","filterByArr","filterTypeByArr","setTypeOptions","newTypeOptions","displayAvailableType","sortRestaurantsByType","filter","val","arrOptions","forEach","restaurant","push","uniqueItems","sort","a","b","itm","label","value","typeOptions"],"mappings":"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","sourcesContent":["export const filterArrByType = (type, arr, restaurants, setArrOptions, sortRestaurants) => {\n  // sort Restaurants according to type\n  const sortedRestaurants = filterByType(restaurants, type);\n\n  // we want to show only available location in the list\n  const newArrOptions = displayAvailableArr(sortedRestaurants);\n  setArrOptions(newArrOptions);\n\n  // filter only the available cuisine types\n  if (arr !== \"Tous les arr.\") {\n    const sortRestaurantsByArr = filterByArr(sortedRestaurants, arr);\n    sortRestaurants(sortRestaurantsByArr);\n  } else {\n    sortRestaurants(sortedRestaurants);\n  };\n};\n\nexport const filterTypeByArr = (arr, type, restaurants, setTypeOptions, sortRestaurants) => {\n  // sort Restaurants according to location\n  const sortedRestaurants = filterByArr(restaurants, arr);\n\n  // we want to show only available cuisine type in the list\n  const newTypeOptions = displayAvailableType(sortedRestaurants);\n  setTypeOptions(newTypeOptions);\n\n  // filter only the available locations\n  if (type !== \"Tous les types\") {\n    const sortRestaurantsByType = filterByType(sortedRestaurants, type);\n    sortRestaurants(sortRestaurantsByType);\n  } else {\n    sortRestaurants(sortedRestaurants);\n  };\n};\n\nconst filterByType = (restaurants, type) => {\n  const sortedRestaurants = [...restaurants].filter(val => {\n    if (val.type) {\n      return val.type === type;\n    } else return null;\n  });\n\n  return sortedRestaurants;\n}\n\nconst filterByArr = (restaurants, arr) => {\n  const sortedRestaurants = [...restaurants].filter(val => {\n    if (val.arr) {\n      return val.arr === arr;\n    } else return null;\n  });\n\n  return sortedRestaurants;\n}\n\nconst displayAvailableArr = restaurants => {\n  const arrOptions = [];\n  restaurants.forEach(restaurant => {\n    arrOptions.push(restaurant.arr);\n  });\n\n  const uniqueItems = [...new Set(arrOptions)];\n  uniqueItems.sort((a, b) => a - b);\n\n  const newArrOptions = [];\n  uniqueItems.forEach(itm => {\n    newArrOptions.push({ label: itm, value: itm });\n  });\n\n  return newArrOptions;\n}\n\nconst displayAvailableType = restaurants => {\n  const typeOptions = [];\n  restaurants.forEach(restaurant => {\n    typeOptions.push(restaurant.type);\n  });\n\n  const uniqueItems = [...new Set(typeOptions)]\n  uniqueItems.sort();\n\n  const newTypeOptions = [];\n  uniqueItems.forEach(itm => {\n    newTypeOptions.push({ label: itm, value: itm });\n  });\n\n  return newTypeOptions;\n}\n"]},"metadata":{},"sourceType":"module"}