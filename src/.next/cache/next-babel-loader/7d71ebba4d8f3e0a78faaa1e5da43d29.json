{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nexport const filterArrByType = (type, arr, restaurants, setArrOptions, sortRestaurants) => {\n  // sort Restaurants according to type\n  const sortedRestaurants = filterByType(restaurants, type); // we want to show only available location in the list\n\n  const newArrOptions = displayAvailableArr(sortedRestaurants);\n  setArrOptions(newArrOptions); // filter only the available cuisine types\n\n  if (arr !== \"Tous les arr.\") {\n    const sortRestaurantsByArr = filterByArr(sortedRestaurants, arr);\n    sortRestaurants(sortRestaurantsByArr);\n  } else {\n    sortRestaurants(sortedRestaurants);\n  }\n\n  ;\n};\nexport const filterTypeByArr = (arr, type, restaurants, setTypeOptions, sortRestaurants) => {\n  // sort Restaurants according to location\n  const sortedRestaurants = filterByArr(restaurants, arr); // we want to show only available cuisine type in the list\n\n  const newTypeOptions = displayAvailableType(sortedRestaurants);\n  setTypeOptions(newTypeOptions); // filter only the available locations\n\n  if (type !== \"Tous les types\") {\n    const sortRestaurantsByType = filterByType(sortedRestaurants, type);\n    sortRestaurants(sortRestaurantsByType);\n  } else {\n    sortRestaurants(sortedRestaurants);\n  }\n\n  ;\n};\n\nconst filterByType = (restaurants, type) => {\n  const sortedRestaurants = [...restaurants].filter(val => {\n    if (val.type) {\n      return val.type === type;\n    } else return null;\n  });\n  return sortedRestaurants;\n};\n\nconst filterByArr = (restaurants, arr) => {\n  const sortedRestaurants = [...restaurants].filter(val => {\n    if (val.arr) {\n      return val.arr === arr;\n    } else return null;\n  });\n  return sortedRestaurants;\n};\n\nconst displayAvailableArr = restaurants => {\n  const arrOptions = [];\n  restaurants.forEach(restaurant => {\n    arrOptions.push(restaurant.arr);\n  });\n  const uniqueItems = [...new _Set(arrOptions)];\n  uniqueItems.sort((a, b) => a - b);\n  const newArrOptions = [];\n  uniqueItems.forEach(itm => {\n    newArrOptions.push({\n      label: itm,\n      value: itm\n    });\n  });\n  return newArrOptions;\n};\n\nconst displayAvailableType = restaurants => {\n  const typeOptions = [];\n  restaurants.forEach(restaurant => {\n    typeOptions.push(restaurant.type);\n  });\n  const uniqueItems = [...new _Set(typeOptions)];\n  uniqueItems.sort();\n  const newTypeOptions = [];\n  uniqueItems.forEach(itm => {\n    newTypeOptions.push({\n      label: itm,\n      value: itm\n    });\n  });\n  return newTypeOptions;\n};","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/restaurants/helper.js"],"names":["filterArrByType","type","arr","restaurants","setArrOptions","sortRestaurants","sortedRestaurants","filterByType","newArrOptions","displayAvailableArr","sortRestaurantsByArr","filterByArr","filterTypeByArr","setTypeOptions","newTypeOptions","displayAvailableType","sortRestaurantsByType","filter","val","arrOptions","forEach","restaurant","push","uniqueItems","sort","a","b","itm","label","value","typeOptions"],"mappings":"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","sourcesContent":["export const filterArrByType = (type, arr, restaurants, setArrOptions, sortRestaurants) => {\n  // sort Restaurants according to type\n  const sortedRestaurants = filterByType(restaurants, type);\n\n  // we want to show only available location in the list\n  const newArrOptions = displayAvailableArr(sortedRestaurants);\n  setArrOptions(newArrOptions);\n\n  // filter only the available cuisine types\n  if (arr !== \"Tous les arr.\") {\n    const sortRestaurantsByArr = filterByArr(sortedRestaurants, arr);\n    sortRestaurants(sortRestaurantsByArr);\n  } else {\n    sortRestaurants(sortedRestaurants);\n  };\n};\n\nexport const filterTypeByArr = (arr, type, restaurants, setTypeOptions, sortRestaurants) => {\n  // sort Restaurants according to location\n  const sortedRestaurants = filterByArr(restaurants, arr);\n\n  // we want to show only available cuisine type in the list\n  const newTypeOptions = displayAvailableType(sortedRestaurants);\n  setTypeOptions(newTypeOptions);\n\n  // filter only the available locations\n  if (type !== \"Tous les types\") {\n    const sortRestaurantsByType = filterByType(sortedRestaurants, type);\n    sortRestaurants(sortRestaurantsByType);\n  } else {\n    sortRestaurants(sortedRestaurants);\n  };\n};\n\nconst filterByType = (restaurants, type) => {\n  const sortedRestaurants = [...restaurants].filter(val => {\n    if (val.type) {\n      return val.type === type;\n    } else return null;\n  });\n\n  return sortedRestaurants;\n}\n\nconst filterByArr = (restaurants, arr) => {\n  const sortedRestaurants = [...restaurants].filter(val => {\n    if (val.arr) {\n      return val.arr === arr;\n    } else return null;\n  });\n\n  return sortedRestaurants;\n}\n\nconst displayAvailableArr = restaurants => {\n  const arrOptions = [];\n  restaurants.forEach(restaurant => {\n    arrOptions.push(restaurant.arr);\n  });\n\n  const uniqueItems = [...new Set(arrOptions)];\n  uniqueItems.sort((a, b) => a - b);\n\n  const newArrOptions = [];\n  uniqueItems.forEach(itm => {\n    newArrOptions.push({ label: itm, value: itm });\n  });\n\n  return newArrOptions;\n}\n\nconst displayAvailableType = restaurants => {\n  const typeOptions = [];\n  restaurants.forEach(restaurant => {\n    typeOptions.push(restaurant.type);\n  });\n\n  const uniqueItems = [...new Set(typeOptions)]\n  uniqueItems.sort();\n\n  const newTypeOptions = [];\n  uniqueItems.forEach(itm => {\n    newTypeOptions.push({ label: itm, value: itm });\n  });\n\n  return newTypeOptions;\n}\n"]},"metadata":{},"sourceType":"module"}