{"ast":null,"code":"var _jsxFileName = \"/Users/estellegresillon/Code/airbnb-redux/src/components/restaurants/filters.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Select from 'react-select';\nimport { setRestaurants, searchRestaurant, sortRestaurants, toggleMap, centerMapWithLocation, toggleListingAwards } from \"../../actions\";\nimport { INIT_ARR_OPTIONS, INIT_TYPE_OPTIONS } from \"../../constants/filter-options\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { filterArrByType, filterTypeByArr } from './helper';\n\nconst SearchByName = props => {\n  const {\n    restaurants,\n    searchRestaurant,\n    centerMapWithLocation,\n    toggleListingAwards,\n    sortRestaurants,\n    toggleMap,\n    showMap,\n    homeArr,\n    homeType\n  } = props;\n  const {\n    0: arr,\n    1: setArr\n  } = useState(\"Tous les arr.\");\n  const {\n    0: type,\n    1: setType\n  } = useState(\"Tous les types\");\n  const {\n    0: searchedRestaurant,\n    1: setSearchedRestaurant\n  } = useState(null);\n  const {\n    0: typeOptions,\n    1: setTypeOptions\n  } = useState(INIT_TYPE_OPTIONS);\n  const {\n    0: arrOptions,\n    1: setArrOptions\n  } = useState(INIT_ARR_OPTIONS);\n  const windowSize = useWindowSize();\n\n  const scrollToTop = () => {\n    document.querySelector(\".tab-number-0\").scrollIntoView();\n  };\n\n  const handleSearchChange = (event, value) => {\n    setSearchedRestaurant(value);\n    setArr(\"Tous les arr.\");\n    setType(\"Tous les types\");\n    toggleListingAwards(false);\n\n    if (value) {\n      searchRestaurant([value]);\n    } else {\n      searchRestaurant(null);\n      setRestaurants();\n    }\n\n    if (windowSize.width > 728) {\n      scrollToTop();\n    }\n  };\n\n  const filterList = (list, option) => {\n    setSearchedRestaurant(null);\n    searchRestaurant(null);\n    toggleListingAwards(false);\n\n    if (option === \"type\") {\n      centerMapWithLocation(null);\n      filterArrByType(list, arr, restaurants, setArrOptions, sortRestaurants);\n    } else {\n      centerMapWithLocation(arr);\n      filterTypeByArr(list, type, restaurants, setTypeOptions, sortRestaurants);\n    }\n\n    if (windowSize.width > 728 && option === \"arr\" && !homeArr || windowSize.width > 728 && option === \"type\" && !homeType) {\n      scrollToTop();\n    }\n  };\n\n  const handleOptionsChange = (e, option) => {\n    const selectedValue = e.value;\n\n    if (option === \"type\") {\n      setType(selectedValue);\n    } else {\n      setArr(selectedValue);\n    }\n\n    filterList(selectedValue, option);\n  };\n\n  const handleToggleMap = () => {\n    toggleMap(showMap);\n  };\n\n  const reinitializeFilters = () => {\n    // empty autocomplete input\n    searchRestaurant(null);\n    setSearchedRestaurant(null); // resort Restaurants by rate\n\n    sortRestaurants([]); // display all Restaurants\n\n    setRestaurants(); // reinit filter options\n\n    setTypeOptions(INIT_TYPE_OPTIONS);\n    setArrOptions(INIT_ARR_OPTIONS); // set default values\n\n    setArr(\"Tous les arr.\");\n    setType(\"Tous les types\"); // reset map location\n\n    centerMapWithLocation(null); // show awards selection again\n\n    toggleListingAwards(true); // scroll to top only after the list is re-rendered\n\n    if (windowSize.width > 728) {\n      scrollToTop();\n    }\n  };\n\n  useEffect(() => {\n    if (restaurants && homeArr && homeArr !== \"Tous les arr.\") {\n      setArr(homeArr);\n      filterList(homeArr, \"arr\");\n    }\n\n    ;\n\n    if (restaurants && homeType && homeType !== \"Tous les types\") {\n      setType(homeType);\n      filterList(homeType, \"type\");\n    }\n\n    ; // eslint-disable-next-line\n  }, [restaurants]);\n  return __jsx(\"div\", {\n    className: \"filters\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"filters-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(\"i\", {\n    className: \"fas fa-search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), __jsx(Autocomplete, {\n    id: \"search-by-name\",\n    options: restaurants,\n    getOptionLabel: option => `${option.name} - ${option.type}`,\n    style: {\n      width: \"300px\",\n      marginRight: \"10px\"\n    },\n    value: searchedRestaurant,\n    onChange: handleSearchChange,\n    renderInput: params => {\n      return __jsx(TextField, _extends({}, params, {\n        style: {\n          width: \"100%\",\n          marginRight: \"20px\",\n          padding: \"0px\"\n        },\n        value: searchedRestaurant,\n        placeholder: \"Rechercher par nom ou type de restaurant\",\n        variant: \"outlined\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), __jsx(Select, {\n    value: arr,\n    options: arrOptions,\n    onChange: e => handleOptionsChange(e, \"arr\"),\n    placeholder: arr,\n    isSearchable: false,\n    className: \"filters-react-select filter-arr\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), __jsx(Select, {\n    value: type,\n    options: typeOptions,\n    onChange: e => handleOptionsChange(e, \"type\"),\n    placeholder: type,\n    isSearchable: false,\n    className: \"filters-react-select filter-type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    className: \"button-filter-reinitialize\",\n    onClick: reinitializeFilters,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"R\\xE9initialiser\")), __jsx(\"div\", {\n    className: \"filters-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"button-toggle-map\",\n    onClick: handleToggleMap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, showMap ? \"Cacher la carte\" : \"Afficher la carte\", __jsx(\"div\", {\n    style: {\n      justifyContent: showMap ? \"flex-end\" : \"flex-start\",\n      backgroundColor: showMap ? \"#ea4235\" : \"#ff6643\"\n    },\n    className: \"switch-toggle-map\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"toggle-circle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  })))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    restaurants: state.restaurants,\n    showMap: state.showMap\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    setRestaurants,\n    searchRestaurant,\n    sortRestaurants,\n    toggleMap,\n    centerMapWithLocation,\n    toggleListingAwards\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchByName);","map":{"version":3,"sources":["/Users/estellegresillon/Code/airbnb-redux/src/components/restaurants/filters.jsx"],"names":["React","useState","useEffect","bindActionCreators","connect","TextField","Autocomplete","Select","setRestaurants","searchRestaurant","sortRestaurants","toggleMap","centerMapWithLocation","toggleListingAwards","INIT_ARR_OPTIONS","INIT_TYPE_OPTIONS","useWindowSize","filterArrByType","filterTypeByArr","SearchByName","props","restaurants","showMap","homeArr","homeType","arr","setArr","type","setType","searchedRestaurant","setSearchedRestaurant","typeOptions","setTypeOptions","arrOptions","setArrOptions","windowSize","scrollToTop","document","querySelector","scrollIntoView","handleSearchChange","event","value","width","filterList","list","option","handleOptionsChange","e","selectedValue","handleToggleMap","reinitializeFilters","name","marginRight","params","padding","justifyContent","backgroundColor","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Select from 'react-select';\n\nimport { \n  setRestaurants,\n  searchRestaurant, \n  sortRestaurants,\n  toggleMap,\n  centerMapWithLocation,\n  toggleListingAwards,\n} from \"../../actions\";\nimport { INIT_ARR_OPTIONS, INIT_TYPE_OPTIONS } from \"../../constants/filter-options\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { filterArrByType, filterTypeByArr } from './helper';\n\n\nconst SearchByName = props => {\n  const { \n    restaurants,\n    searchRestaurant,\n    centerMapWithLocation,\n    toggleListingAwards,\n    sortRestaurants,\n    toggleMap,\n    showMap,\n    homeArr,\n    homeType\n  } = props;\n  const [arr, setArr] = useState(\"Tous les arr.\");\n  const [type, setType] = useState(\"Tous les types\");\n  const [searchedRestaurant, setSearchedRestaurant] = useState(null);\n  const [typeOptions, setTypeOptions] = useState(INIT_TYPE_OPTIONS);\n  const [arrOptions, setArrOptions] = useState(INIT_ARR_OPTIONS);\n  const windowSize = useWindowSize();\n\n  const scrollToTop = () => {\n    document.querySelector(\".tab-number-0\").scrollIntoView();\n  };\n\n  const handleSearchChange = (event, value) => {\n    setSearchedRestaurant(value);\n    setArr(\"Tous les arr.\");\n    setType(\"Tous les types\");\n    toggleListingAwards(false);\n\n    if (value) {\n      searchRestaurant([value]);\n    } else {\n      searchRestaurant(null);\n      setRestaurants();\n    }\n\n    if (windowSize.width > 728) {\n      scrollToTop();\n    }\n  }\n\n  const filterList = (list, option) => {\n    setSearchedRestaurant(null);\n    searchRestaurant(null);\n    toggleListingAwards(false);\n\n    if (option === \"type\") {\n      centerMapWithLocation(null);\n      filterArrByType(list, arr, restaurants, setArrOptions, sortRestaurants);\n    } else {\n      centerMapWithLocation(arr);\n      filterTypeByArr(list, type, restaurants, setTypeOptions, sortRestaurants);\n    }\n\n    if ((windowSize.width > 728 && (option === \"arr\" && !homeArr)) || \n      (windowSize.width > 728 && (option === \"type\" && !homeType))) {\n      scrollToTop();\n    }\n  }\n\n  const handleOptionsChange = (e, option) => {\n    const selectedValue = e.value;\n\n    if (option === \"type\") {\n      setType(selectedValue);\n    } else {\n      setArr(selectedValue);\n    }\n    filterList(selectedValue, option);\n  };\n\n  const handleToggleMap = () => {\n    toggleMap(showMap)\n  };\n\n  const reinitializeFilters = () => {\n    // empty autocomplete input\n    searchRestaurant(null);\n    setSearchedRestaurant(null);\n\n    // resort Restaurants by rate\n    sortRestaurants([]);\n    // display all Restaurants\n    setRestaurants();\n\n    // reinit filter options\n    setTypeOptions(INIT_TYPE_OPTIONS);\n    setArrOptions(INIT_ARR_OPTIONS);\n\n    // set default values\n    setArr(\"Tous les arr.\");\n    setType(\"Tous les types\");\n\n    // reset map location\n    centerMapWithLocation(null);\n\n    // show awards selection again\n    toggleListingAwards(true);\n\n    // scroll to top only after the list is re-rendered\n    if (windowSize.width > 728) {\n      scrollToTop();\n    }\n  };\n\n  useEffect(() => {\n    if (restaurants && homeArr && homeArr !== \"Tous les arr.\") {\n      setArr(homeArr);\n      filterList(homeArr, \"arr\");\n    };\n\n    if (restaurants && homeType && homeType !== \"Tous les types\") {\n      setType(homeType);\n      filterList(homeType, \"type\");\n    };\n  // eslint-disable-next-line\n  }, [restaurants])\n\n  return (\n    <div className=\"filters\">\n      <div className=\"filters-left\">\n        <i className=\"fas fa-search\" />\n        <Autocomplete\n          id=\"search-by-name\"\n          options={restaurants}\n          getOptionLabel={option => `${option.name} - ${option.type}`}\n          style={{ width: \"300px\", marginRight: \"10px\"}}\n          value={searchedRestaurant}\n          onChange={handleSearchChange}\n          renderInput={params => {\n            return (\n              <TextField \n                {...params}\n                style={{ width: \"100%\", marginRight: \"20px\", padding: \"0px\"}}\n                value={searchedRestaurant}\n                placeholder=\"Rechercher par nom ou type de restaurant\"\n                variant=\"outlined\"\n                fullWidth\n              />\n            )}}\n        />\n        <Select\n          value={arr}\n          options={arrOptions}\n          onChange={e => handleOptionsChange(e, \"arr\")}\n          placeholder={arr}\n          isSearchable={false}\n          className=\"filters-react-select filter-arr\"\n        />\n        <Select\n          value={type}\n          options={typeOptions} \n          onChange={e => handleOptionsChange(e, \"type\")} \n          placeholder={type}\n          isSearchable={false}\n          className=\"filters-react-select filter-type\"\n        />\n        <button className=\"button-filter-reinitialize\" onClick={reinitializeFilters}>Réinitialiser</button>\n      </div>\n\n      <div className=\"filters-right\">\n        <div className=\"button-toggle-map\" onClick={handleToggleMap}>\n          {showMap ? \"Cacher la carte\" : \"Afficher la carte\"}\n          <div \n            style={{ \n              justifyContent: showMap ? \"flex-end\" : \"flex-start\",\n              backgroundColor: showMap ? \"#ea4235\" : \"#ff6643\"\n            }}\n            className=\"switch-toggle-map\">\n            <div className=\"toggle-circle\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return { \n    restaurants: state.restaurants,\n    showMap: state.showMap,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ setRestaurants, searchRestaurant, sortRestaurants, toggleMap, centerMapWithLocation, toggleListingAwards }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchByName);\n"]},"metadata":{},"sourceType":"module"}